
DEVICE_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008b60  08008b60  00009b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d0c  08008d0c  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d0c  08008d0c  00009d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d14  08008d14  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d18  08008d18  00009d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008d1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a14c  2**0
                  CONTENTS
 10 .bss          00001da0  2000014c  2000014c  0000a14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001eec  20001eec  0000a14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0aa  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e26  00000000  00000000  00019226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0001c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000932  00000000  00000000  0001ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fe1  00000000  00000000  0001d5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104fd  00000000  00000000  000415d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ee4  00000000  00000000  00051ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001229b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003874  00000000  00000000  001229f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  0012626c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b48 	.word	0x08008b48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	08008b48 	.word	0x08008b48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <ADC_Select_CH0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0(void){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000d66:	2302      	movs	r3, #2
 8000d68:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <ADC_Select_CH0+0x3c>)
 8000d70:	f000 fd9c 	bl	80018ac <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8000d7a:	f000 fa01 	bl	8001180 <Error_Handler>
	  }
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000168 	.word	0x20000168

08000d8c <ADC_Select_CH1>:

void ADC_Select_CH1(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	//  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000da6:	2302      	movs	r3, #2
 8000da8:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <ADC_Select_CH1+0x3c>)
 8000db0:	f000 fd7c 	bl	80018ac <HAL_ADC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8000dba:	f000 f9e1 	bl	8001180 <Error_Handler>
	  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000168 	.word	0x20000168
 8000dcc:	00000000 	.word	0x00000000

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd6:	f000 faf1 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dda:	f000 f8b5 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dde:	f000 f97d 	bl	80010dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000de2:	f000 f91b 	bl	800101c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000de6:	f006 fc29 	bl	800763c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000dea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dee:	4850      	ldr	r0, [pc, #320]	@ (8000f30 <main+0x160>)
 8000df0:	f001 fa41 	bl	8002276 <HAL_GPIO_TogglePin>
	  if(flag == 1){
 8000df4:	4b4f      	ldr	r3, [pc, #316]	@ (8000f34 <main+0x164>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d12d      	bne.n	8000e5a <main+0x8a>
		  ADC_Select_CH0();
 8000dfe:	f7ff ffa5 	bl	8000d4c <ADC_Select_CH0>
		  HAL_ADC_Start(&hadc1);
 8000e02:	484d      	ldr	r0, [pc, #308]	@ (8000f38 <main+0x168>)
 8000e04:	f000 fbb4 	bl	8001570 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e0c:	484a      	ldr	r0, [pc, #296]	@ (8000f38 <main+0x168>)
 8000e0e:	f000 fcb4 	bl	800177a <HAL_ADC_PollForConversion>
		  ADC_Val[0] = HAL_ADC_GetValue(&hadc1);
 8000e12:	4849      	ldr	r0, [pc, #292]	@ (8000f38 <main+0x168>)
 8000e14:	f000 fd3c 	bl	8001890 <HAL_ADC_GetValue>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	4b47      	ldr	r3, [pc, #284]	@ (8000f3c <main+0x16c>)
 8000e1e:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 8000e20:	4845      	ldr	r0, [pc, #276]	@ (8000f38 <main+0x168>)
 8000e22:	f000 fc77 	bl	8001714 <HAL_ADC_Stop>
		  sprintf(str,"LDR  = %d \r\n",ADC_Val[0]);
 8000e26:	4b45      	ldr	r3, [pc, #276]	@ (8000f3c <main+0x16c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4943      	ldr	r1, [pc, #268]	@ (8000f40 <main+0x170>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f007 f9d4 	bl	80081e0 <siprintf>
		  CDC_Transmit_FS((uint8_t *)str, strlen(str));
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff f9c7 	bl	80001d0 <strlen>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f006 fce3 	bl	8007818 <CDC_Transmit_FS>
		  flag = 0;
 8000e52:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <main+0x164>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e05e      	b.n	8000f18 <main+0x148>
	  }
	  else if(flag == 2){
 8000e5a:	4b36      	ldr	r3, [pc, #216]	@ (8000f34 <main+0x164>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d141      	bne.n	8000ee8 <main+0x118>
		  ADC_Select_CH1();
 8000e64:	f7ff ff92 	bl	8000d8c <ADC_Select_CH1>
		  HAL_ADC_Start(&hadc1);
 8000e68:	4833      	ldr	r0, [pc, #204]	@ (8000f38 <main+0x168>)
 8000e6a:	f000 fb81 	bl	8001570 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000e6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e72:	4831      	ldr	r0, [pc, #196]	@ (8000f38 <main+0x168>)
 8000e74:	f000 fc81 	bl	800177a <HAL_ADC_PollForConversion>
		  ADC_Val[1] = HAL_ADC_GetValue(&hadc1);
 8000e78:	482f      	ldr	r0, [pc, #188]	@ (8000f38 <main+0x168>)
 8000e7a:	f000 fd09 	bl	8001890 <HAL_ADC_GetValue>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <main+0x16c>)
 8000e84:	805a      	strh	r2, [r3, #2]
		  ADC_Val[1] = ADC_Val[1]/10.24;
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <main+0x16c>)
 8000e88:	885b      	ldrh	r3, [r3, #2]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb4a 	bl	8000524 <__aeabi_i2d>
 8000e90:	a325      	add	r3, pc, #148	@ (adr r3, 8000f28 <main+0x158>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	f7ff fcd9 	bl	800084c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fdbb 	bl	8000a1c <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <main+0x16c>)
 8000eac:	805a      	strh	r2, [r3, #2]
		  HAL_ADC_Stop(&hadc1);
 8000eae:	4822      	ldr	r0, [pc, #136]	@ (8000f38 <main+0x168>)
 8000eb0:	f000 fc30 	bl	8001714 <HAL_ADC_Stop>
		  sprintf(str,"LM35  = %d \r\n",ADC_Val[1]);
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <main+0x16c>)
 8000eb6:	885b      	ldrh	r3, [r3, #2]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4921      	ldr	r1, [pc, #132]	@ (8000f44 <main+0x174>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f007 f98d 	bl	80081e0 <siprintf>
		  CDC_Transmit_FS((uint8_t *)str, strlen(str));
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff f980 	bl	80001d0 <strlen>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 fc9c 	bl	8007818 <CDC_Transmit_FS>
		  flag = 0;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <main+0x164>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e017      	b.n	8000f18 <main+0x148>
	  }
	  else if(flag == 3){
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <main+0x164>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d112      	bne.n	8000f18 <main+0x148>
		  volatile uint16_t cnt=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	80fb      	strh	r3, [r7, #6]
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
		  while(cnt<10){
 8000ef6:	e008      	b.n	8000f0a <main+0x13a>
//		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_RESET);
//		  			  HAL_Delay(200);
//		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_RESET);
//		  			  HAL_Delay(200);
//		  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_RESET);
		  			  HAL_Delay(1000);
 8000ef8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000efc:	f000 fad0 	bl	80014a0 <HAL_Delay>
		  			  cnt++;
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	80fb      	strh	r3, [r7, #6]
		  while(cnt<10){
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d9f2      	bls.n	8000ef8 <main+0x128>
		  		  }
		  flag = 0;
 8000f12:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <main+0x164>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
	  }
//	  else{
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
//	  }

	  HAL_Delay(1000);
 8000f18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1c:	f000 fac0 	bl	80014a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f20:	e763      	b.n	8000dea <main+0x1a>
 8000f22:	bf00      	nop
 8000f24:	f3af 8000 	nop.w
 8000f28:	47ae147b 	.word	0x47ae147b
 8000f2c:	40247ae1 	.word	0x40247ae1
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	2000149c 	.word	0x2000149c
 8000f38:	20000168 	.word	0x20000168
 8000f3c:	200001b0 	.word	0x200001b0
 8000f40:	08008b60 	.word	0x08008b60
 8000f44:	08008b70 	.word	0x08008b70

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	@ 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	@ 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f007 f962 	bl	8008220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	@ (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a21      	ldr	r2, [pc, #132]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fbc:	23a8      	movs	r3, #168	@ 0xa8
 8000fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fbbd 	bl	800374c <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fd8:	f000 f8d2 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2105      	movs	r1, #5
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fe1e 	bl	8003c3c <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001006:	f000 f8bb 	bl	8001180 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	@ 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102e:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001030:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <MX_ADC1_Init+0xb8>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001034:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001036:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800103a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800104a:	2201      	movs	r2, #1
 800104c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800105e:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <MX_ADC1_Init+0xbc>)
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800106a:	2202      	movs	r2, #2
 800106c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 8001078:	2201      	movs	r2, #1
 800107a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800107e:	f000 fa33 	bl	80014e8 <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001088:	f000 f87a 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001094:	2302      	movs	r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 800109e:	f000 fc05 	bl	80018ac <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a8:	f000 f86a 	bl	8001180 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_ADC1_Init+0xb4>)
 80010ba:	f000 fbf7 	bl	80018ac <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010c4:	f000 f85c 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000168 	.word	0x20000168
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <MX_GPIO_Init+0x9c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001178 <MX_GPIO_Init+0x9c>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a18      	ldr	r2, [pc, #96]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <MX_GPIO_Init+0x9c>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_GPIO_Init+0x9c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <MX_GPIO_Init+0xa0>)
 800114e:	f001 f879 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001152:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <MX_GPIO_Init+0xa0>)
 800116c:	f000 fece 	bl	8001f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	@ (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fe5c 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <HAL_ADC_MspInit+0x7c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d127      	bne.n	800124e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_ADC_MspInit+0x80>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a15      	ldr	r2, [pc, #84]	@ (800125c <HAL_ADC_MspInit+0x80>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_ADC_MspInit+0x80>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_ADC_MspInit+0x80>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a0e      	ldr	r2, [pc, #56]	@ (800125c <HAL_ADC_MspInit+0x80>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b0c      	ldr	r3, [pc, #48]	@ (800125c <HAL_ADC_MspInit+0x80>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001236:	2303      	movs	r3, #3
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <HAL_ADC_MspInit+0x84>)
 800124a:	f000 fe5f 	bl	8001f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012000 	.word	0x40012000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 f8d1 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <OTG_FS_IRQHandler+0x10>)
 80012ca:	f001 f932 	bl	8002532 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200016a0 	.word	0x200016a0

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f006 ffa6 	bl	8008258 <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20020000 	.word	0x20020000
 8001338:	00000400 	.word	0x00000400
 800133c:	200001b4 	.word	0x200001b4
 8001340:	20001ef0 	.word	0x20001ef0

08001344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f006 ff65 	bl	8008264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fd19 	bl	8000dd0 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80013ac:	08008d1c 	.word	0x08008d1c
  ldr r2, =_sbss
 80013b0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80013b4:	20001eec 	.word	0x20001eec

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	@ (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	@ (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 fd4f 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fecc 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 fd67 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800143c:	f000 fd2f 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	@ (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	200001b8 	.word	0x200001b8

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200001b8 	.word	0x200001b8

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e033      	b.n	8001566 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fe68 	bl	80011dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800152e:	f023 0302 	bic.w	r3, r3, #2
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fad8 	bl	8001af0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
 8001556:	e001      	b.n	800155c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADC_Start+0x1a>
 8001586:	2302      	movs	r3, #2
 8001588:	e0b2      	b.n	80016f0 <HAL_ADC_Start+0x180>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d018      	beq.n	80015d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015b0:	4b52      	ldr	r3, [pc, #328]	@ (80016fc <HAL_ADC_Start+0x18c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a52      	ldr	r2, [pc, #328]	@ (8001700 <HAL_ADC_Start+0x190>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9a      	lsrs	r2, r3, #18
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d17a      	bne.n	80016d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800160a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800161e:	d106      	bne.n	800162e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	f023 0206 	bic.w	r2, r3, #6
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	645a      	str	r2, [r3, #68]	@ 0x44
 800162c:	e002      	b.n	8001634 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163c:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_ADC_Start+0x194>)
 800163e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001648:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2b00      	cmp	r3, #0
 8001654:	d12a      	bne.n	80016ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2b      	ldr	r2, [pc, #172]	@ (8001708 <HAL_ADC_Start+0x198>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d015      	beq.n	800168c <HAL_ADC_Start+0x11c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a29      	ldr	r2, [pc, #164]	@ (800170c <HAL_ADC_Start+0x19c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d105      	bne.n	8001676 <HAL_ADC_Start+0x106>
 800166a:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <HAL_ADC_Start+0x194>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 031f 	and.w	r3, r3, #31
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00a      	beq.n	800168c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <HAL_ADC_Start+0x1a0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d136      	bne.n	80016ee <HAL_ADC_Start+0x17e>
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_ADC_Start+0x194>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d130      	bne.n	80016ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d129      	bne.n	80016ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e020      	b.n	80016ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <HAL_ADC_Start+0x198>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d11b      	bne.n	80016ee <HAL_ADC_Start+0x17e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d114      	bne.n	80016ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e00b      	b.n	80016ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f043 0210 	orr.w	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000
 8001700:	431bde83 	.word	0x431bde83
 8001704:	40012300 	.word	0x40012300
 8001708:	40012000 	.word	0x40012000
 800170c:	40012100 	.word	0x40012100
 8001710:	40012200 	.word	0x40012200

08001714 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_Stop+0x16>
 8001726:	2302      	movs	r3, #2
 8001728:	e021      	b.n	800176e <HAL_ADC_Stop+0x5a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001796:	d113      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017a6:	d10b      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f043 0220 	orr.w	r2, r3, #32
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e063      	b.n	8001888 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c0:	f7ff fe62 	bl	8001488 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017c6:	e021      	b.n	800180c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017ce:	d01d      	beq.n	800180c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_ADC_PollForConversion+0x6c>
 80017d6:	f7ff fe57 	bl	8001488 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d212      	bcs.n	800180c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d00b      	beq.n	800180c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f043 0204 	orr.w	r2, r3, #4
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e03d      	b.n	8001888 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d1d6      	bne.n	80017c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0212 	mvn.w	r2, #18
 8001822:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d123      	bne.n	8001886 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001842:	2b00      	cmp	r3, #0
 8001844:	d11f      	bne.n	8001886 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800185e:	2b00      	cmp	r3, #0
 8001860:	d111      	bne.n	8001886 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d105      	bne.n	8001886 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1c>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e105      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x228>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d925      	bls.n	8001924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68d9      	ldr	r1, [r3, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	2207      	movs	r2, #7
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	4603      	mov	r3, r0
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4403      	add	r3, r0
 8001916:	3b1e      	subs	r3, #30
 8001918:	409a      	lsls	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e022      	b.n	800196a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	2207      	movs	r2, #7
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6919      	ldr	r1, [r3, #16]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4403      	add	r3, r0
 8001960:	409a      	lsls	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d824      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	221f      	movs	r2, #31
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b05      	subs	r3, #5
 80019ae:	fa00 f203 	lsl.w	r2, r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ba:	e04c      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d824      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b23      	subs	r3, #35	@ 0x23
 80019d6:	221f      	movs	r2, #31
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43da      	mvns	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b23      	subs	r3, #35	@ 0x23
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a0c:	e023      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b41      	subs	r3, #65	@ 0x41
 8001a20:	221f      	movs	r2, #31
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b41      	subs	r3, #65	@ 0x41
 8001a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a56:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x234>)
 8001a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x238>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1cc>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x238>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d123      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d003      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x1e6>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d111      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x23c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_ADC_ConfigChannel+0x240>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9a      	lsrs	r2, r3, #18
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001abc:	e002      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f9      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af8:	4b79      	ldr	r3, [pc, #484]	@ (8001ce0 <ADC_Init+0x1f0>)
 8001afa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	021a      	lsls	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	4a58      	ldr	r2, [pc, #352]	@ (8001ce4 <ADC_Init+0x1f4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6899      	ldr	r1, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e00f      	b.n	8001bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0202 	bic.w	r2, r2, #2
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e1b      	ldrb	r3, [r3, #24]
 8001c08:	005a      	lsls	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	035a      	lsls	r2, r3, #13
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e007      	b.n	8001c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	051a      	lsls	r2, r3, #20
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	029a      	lsls	r2, r3, #10
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012300 	.word	0x40012300
 8001ce4:	0f000001 	.word	0x0f000001

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff29 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff3e 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff8e 	bl	8001ddc <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff31 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa2 	bl	8001e44 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	@ 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	e16b      	b.n	8002200 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 815a 	bne.w	80021fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d005      	beq.n	8001f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d017      	beq.n	8001ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d123      	bne.n	8002050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	08da      	lsrs	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3208      	adds	r2, #8
 8002010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	220f      	movs	r2, #15
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	08da      	lsrs	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3208      	adds	r2, #8
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0203 	and.w	r2, r3, #3
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80b4 	beq.w	80021fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a5f      	ldr	r2, [pc, #380]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <HAL_GPIO_Init+0x30c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ae:	4a5b      	ldr	r2, [pc, #364]	@ (800221c <HAL_GPIO_Init+0x310>)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	220f      	movs	r2, #15
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	@ (8002220 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a51      	ldr	r2, [pc, #324]	@ (8002224 <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a50      	ldr	r2, [pc, #320]	@ (8002228 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4f      	ldr	r2, [pc, #316]	@ (800222c <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x21a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002230 <HAL_GPIO_Init+0x324>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x216>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002234 <HAL_GPIO_Init+0x328>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x212>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4c      	ldr	r2, [pc, #304]	@ (8002238 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4b      	ldr	r2, [pc, #300]	@ (800223c <HAL_GPIO_Init+0x330>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x20a>
 8002112:	2307      	movs	r3, #7
 8002114:	e00e      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002116:	2308      	movs	r3, #8
 8002118:	e00c      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211a:	2306      	movs	r3, #6
 800211c:	e00a      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800211e:	2305      	movs	r3, #5
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002122:	2304      	movs	r3, #4
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x228>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x228>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	@ (800221c <HAL_GPIO_Init+0x310>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b3b      	ldr	r3, [pc, #236]	@ (8002240 <HAL_GPIO_Init+0x334>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a32      	ldr	r2, [pc, #200]	@ (8002240 <HAL_GPIO_Init+0x334>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b30      	ldr	r3, [pc, #192]	@ (8002240 <HAL_GPIO_Init+0x334>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <HAL_GPIO_Init+0x334>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f ae90 	bls.w	8001f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40021400 	.word	0x40021400
 8002238:	40021800 	.word	0x40021800
 800223c:	40021c00 	.word	0x40021c00
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	619a      	str	r2, [r3, #24]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	041a      	lsls	r2, r3, #16
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43d9      	mvns	r1, r3
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	400b      	ands	r3, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af02      	add	r7, sp, #8
 80022b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e101      	b.n	80024c0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 fbe6 	bl	8007aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2203      	movs	r2, #3
 80022e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ea:	d102      	bne.n	80022f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 ffaf 	bl	800425a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7c1a      	ldrb	r2, [r3, #16]
 8002304:	f88d 2000 	strb.w	r2, [sp]
 8002308:	3304      	adds	r3, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	f001 fe8e 	bl	800402c <USB_CoreInit>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0ce      	b.n	80024c0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f001 ffa7 	bl	800427c <USB_SetCurrentMode>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0bf      	b.n	80024c0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e04a      	b.n	80023dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3315      	adds	r3, #21
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3314      	adds	r3, #20
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	b298      	uxth	r0, r3
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	332e      	adds	r3, #46	@ 0x2e
 8002382:	4602      	mov	r2, r0
 8002384:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3318      	adds	r3, #24
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	331c      	adds	r3, #28
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3320      	adds	r3, #32
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3324      	adds	r3, #36	@ 0x24
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3af      	bcc.n	8002346 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e044      	b.n	8002476 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3301      	adds	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3b5      	bcc.n	80023ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7c1a      	ldrb	r2, [r3, #16]
 8002488:	f88d 2000 	strb.w	r2, [sp]
 800248c:	3304      	adds	r3, #4
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	f001 ff40 	bl	8004314 <USB_DevInit>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00c      	b.n	80024c0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 ff84 	bl	80053c6 <USB_DevDisconnect>

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Start+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e022      	b.n	800252a <HAL_PCD_Start+0x62>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d009      	beq.n	800250c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f001 fe91 	bl	8004238 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 ff32 	bl	8005384 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002532:	b590      	push	{r4, r7, lr}
 8002534:	b08d      	sub	sp, #52	@ 0x34
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fff0 	bl	800552e <USB_GetMode>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 848c 	bne.w	8002e6e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f002 ff54 	bl	8005408 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8482 	beq.w	8002e6c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f002 ff41 	bl	8005408 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d107      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f002 0202 	and.w	r2, r2, #2
 800259e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 ff2f 	bl	8005408 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d161      	bne.n	8002678 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0210 	bic.w	r2, r2, #16
 80025c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f003 020f 	and.w	r2, r3, #15
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	0c5b      	lsrs	r3, r3, #17
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d124      	bne.n	800263a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d035      	beq.n	8002668 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6a38      	ldr	r0, [r7, #32]
 8002610:	f002 fd66 	bl	80050e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002620:	441a      	add	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002632:	441a      	add	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	e016      	b.n	8002668 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	0c5b      	lsrs	r3, r3, #17
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	2b06      	cmp	r3, #6
 8002644:	d110      	bne.n	8002668 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800264c:	2208      	movs	r2, #8
 800264e:	4619      	mov	r1, r3
 8002650:	6a38      	ldr	r0, [r7, #32]
 8002652:	f002 fd45 	bl	80050e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002662:	441a      	add	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0210 	orr.w	r2, r2, #16
 8002676:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fec3 	bl	8005408 <USB_ReadInterrupts>
 8002682:	4603      	mov	r3, r0
 8002684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002688:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800268c:	f040 80a7 	bne.w	80027de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f002 fec8 	bl	800542e <USB_ReadDevAllOutEpInterrupt>
 800269e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80026a0:	e099      	b.n	80027d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 808e 	beq.w	80027ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f002 feec 	bl	8005496 <USB_ReadDevOutEPInterrupt>
 80026be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2301      	movs	r3, #1
 80026da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fea2 	bl	8003428 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fa:	461a      	mov	r2, r3
 80026fc:	2308      	movs	r3, #8
 80026fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 ff78 	bl	80035f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	2310      	movs	r3, #16
 8002722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d030      	beq.n	8002790 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002736:	2b80      	cmp	r3, #128	@ 0x80
 8002738:	d109      	bne.n	800274e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002748:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d108      	bne.n	800277e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2200      	movs	r2, #0
 8002770:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f005 fa9b 	bl	8007cb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800278a:	461a      	mov	r2, r3
 800278c:	2302      	movs	r3, #2
 800278e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a6:	461a      	mov	r2, r3
 80027a8:	2320      	movs	r3, #32
 80027aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c2:	461a      	mov	r2, r3
 80027c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	3301      	adds	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f47f af62 	bne.w	80026a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fe10 	bl	8005408 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027f2:	f040 80db 	bne.w	80029ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fe31 	bl	8005462 <USB_ReadDevAllInEpInterrupt>
 8002800:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002806:	e0cd      	b.n	80029a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80c2 	beq.w	8002998 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fe57 	bl	80054d2 <USB_ReadDevInEPInterrupt>
 8002824:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d057      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	2201      	movs	r2, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	69f9      	ldr	r1, [r7, #28]
 800284c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002850:	4013      	ands	r3, r2
 8002852:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002860:	461a      	mov	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	799b      	ldrb	r3, [r3, #6]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d132      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3320      	adds	r3, #32
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	331c      	adds	r3, #28
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4419      	add	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4403      	add	r3, r0
 80028a2:	3320      	adds	r3, #32
 80028a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x3a2>
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	3324      	adds	r3, #36	@ 0x24
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d108      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028cc:	461a      	mov	r2, r3
 80028ce:	2101      	movs	r1, #1
 80028d0:	f002 fe5e 	bl	8005590 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f005 f965 	bl	8007baa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028f6:	461a      	mov	r2, r3
 80028f8:	2308      	movs	r3, #8
 80028fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002912:	461a      	mov	r2, r3
 8002914:	2310      	movs	r3, #16
 8002916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800292e:	461a      	mov	r2, r3
 8002930:	2340      	movs	r3, #64	@ 0x40
 8002932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d023      	beq.n	8002986 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800293e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002940:	6a38      	ldr	r0, [r7, #32]
 8002942:	f001 fe4b 	bl	80045dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	3310      	adds	r3, #16
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d108      	bne.n	8002974 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2200      	movs	r2, #0
 8002966:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f005 f9b2 	bl	8007cd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002980:	461a      	mov	r2, r3
 8002982:	2302      	movs	r3, #2
 8002984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fcbb 	bl	800330e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af2e 	bne.w	8002808 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fd29 	bl	8005408 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029c0:	d122      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d108      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029e8:	2100      	movs	r1, #0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fea2 	bl	8003734 <HAL_PCDEx_LPM_Callback>
 80029f0:	e002      	b.n	80029f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f005 f950 	bl	8007c98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fcfb 	bl	8005408 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a1c:	d112      	bne.n	8002a44 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f005 f90c 	bl	8007c4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002a42:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fcdd 	bl	8005408 <USB_ReadInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a58:	f040 80b7 	bne.w	8002bca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2110      	movs	r1, #16
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fdb0 	bl	80045dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a80:	e046      	b.n	8002b10 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002a94:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa6:	0151      	lsls	r1, r2, #5
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	440a      	add	r2, r1
 8002aac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ab0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ab4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ac8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ada:	0151      	lsls	r1, r2, #5
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	440a      	add	r2, r1
 8002ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ae4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ae8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002afa:	0151      	lsls	r1, r2, #5
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	440a      	add	r2, r1
 8002b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	791b      	ldrb	r3, [r3, #4]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d3b2      	bcc.n	8002a82 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b2a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7bdb      	ldrb	r3, [r3, #15]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d016      	beq.n	8002b66 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b48:	f043 030b 	orr.w	r3, r3, #11
 8002b4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b5e:	f043 030b 	orr.w	r3, r3, #11
 8002b62:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b64:	e015      	b.n	8002b92 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b78:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002b7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8c:	f043 030b 	orr.w	r3, r3, #11
 8002b90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ba0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ba4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f002 fceb 	bl	8005590 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fc1a 	bl	8005408 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bde:	d123      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fcb0 	bl	800554a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fd6d 	bl	80046ce <USB_GetDevSpeed>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681c      	ldr	r4, [r3, #0]
 8002c00:	f001 fa08 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8002c04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	f001 fa71 	bl	80040f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f004 fff1 	bl	8007bfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fbeb 	bl	8005408 <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d10a      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f004 ffce 	bl	8007bde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f002 0208 	and.w	r2, r2, #8
 8002c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 fbd6 	bl	8005408 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	2b80      	cmp	r3, #128	@ 0x80
 8002c64:	d123      	bne.n	8002cae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c76:	e014      	b.n	8002ca2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fb08 	bl	80032ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	791b      	ldrb	r3, [r3, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d3e4      	bcc.n	8002c78 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fba8 	bl	8005408 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cc2:	d13c      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc8:	e02b      	b.n	8002d22 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3318      	adds	r3, #24
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d115      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da12      	bge.n	8002d1c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3317      	adds	r3, #23
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fac8 	bl	80032ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	3301      	adds	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d3cd      	bcc.n	8002cca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 fb60 	bl	8005408 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d52:	d156      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d58:	e045      	b.n	8002de6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d12e      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da2b      	bge.n	8002de0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002d94:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d121      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ddc:	6053      	str	r3, [r2, #4]
            break;
 8002dde:	e008      	b.n	8002df2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	3301      	adds	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	461a      	mov	r2, r3
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d3b3      	bcc.n	8002d5a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fafe 	bl	8005408 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e16:	d10a      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f004 ff6f 	bl	8007cfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 fae8 	bl	8005408 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d115      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f004 ff5f 	bl	8007d18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e000      	b.n	8002e6e <HAL_PCD_IRQHandler+0x93c>
      return;
 8002e6c:	bf00      	nop
    }
  }
}
 8002e6e:	3734      	adds	r7, #52	@ 0x34
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}

08002e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_PCD_SetAddress+0x1a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e012      	b.n	8002eb4 <HAL_PCD_SetAddress+0x40>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fa47 	bl	8005338 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	70fb      	strb	r3, [r7, #3]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	803b      	strh	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da0f      	bge.n	8002f02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3310      	adds	r3, #16
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
 8002f00:	e00f      	b.n	8002f22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f2e:	883a      	ldrh	r2, [r7, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	78ba      	ldrb	r2, [r7, #2]
 8002f38:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f4c:	78bb      	ldrb	r3, [r7, #2]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d102      	bne.n	8002f58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_EP_Open+0xaa>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e00e      	b.n	8002f84 <HAL_PCD_EP_Open+0xc8>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fbcf 	bl	8004718 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002f82:	7afb      	ldrb	r3, [r7, #11]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da0f      	bge.n	8002fc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3310      	adds	r3, #16
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00f      	b.n	8002fe0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_PCD_EP_Close+0x6e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e00e      	b.n	8003018 <HAL_PCD_EP_Close+0x8c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fc0d 	bl	8004828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 020f 	and.w	r2, r3, #15
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	b2da      	uxtb	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	799b      	ldrb	r3, [r3, #6]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d102      	bne.n	800307c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	799b      	ldrb	r3, [r3, #6]
 8003084:	461a      	mov	r2, r3
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	f001 fcaa 	bl	80049e0 <USB_EPStartXfer>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80030b8:	681b      	ldr	r3, [r3, #0]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	460b      	mov	r3, r1
 80030d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3310      	adds	r3, #16
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2201      	movs	r2, #1
 8003104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	799b      	ldrb	r3, [r3, #6]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	799b      	ldrb	r3, [r3, #6]
 8003128:	461a      	mov	r2, r3
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	f001 fc58 	bl	80049e0 <USB_EPStartXfer>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	7912      	ldrb	r2, [r2, #4]
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e04f      	b.n	80031f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3310      	adds	r3, #16
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00d      	b.n	800319c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_EP_SetStall+0x82>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e01d      	b.n	80031f8 <HAL_PCD_EP_SetStall+0xbe>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 ffe0 	bl	8005190 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7999      	ldrb	r1, [r3, #6]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031e8:	461a      	mov	r2, r3
 80031ea:	f002 f9d1 	bl	8005590 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	7912      	ldrb	r2, [r2, #4]
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e042      	b.n	80032a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800321e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	da0f      	bge.n	8003246 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3310      	adds	r3, #16
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	705a      	strb	r2, [r3, #1]
 8003244:	e00f      	b.n	8003266 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 020f 	and.w	r2, r3, #15
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_PCD_EP_ClrStall+0x86>
 8003282:	2302      	movs	r3, #2
 8003284:	e00e      	b.n	80032a4 <HAL_PCD_EP_ClrStall+0xa4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68f9      	ldr	r1, [r7, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	f001 ffe9 	bl	800526c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	da0c      	bge.n	80032da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3310      	adds	r3, #16
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	3304      	adds	r3, #4
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e00c      	b.n	80032f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	f003 020f 	and.w	r2, r3, #15
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fe08 	bl	8004f10 <USB_EPStopXfer>
 8003300:	4603      	mov	r3, r0
 8003302:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003304:	7afb      	ldrb	r3, [r7, #11]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08a      	sub	sp, #40	@ 0x28
 8003312:	af02      	add	r7, sp, #8
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d901      	bls.n	8003346 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06b      	b.n	800341e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	429a      	cmp	r2, r3
 800335a:	d902      	bls.n	8003362 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3303      	adds	r3, #3
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800336a:	e02a      	b.n	80033c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	429a      	cmp	r2, r3
 8003380:	d902      	bls.n	8003388 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	3303      	adds	r3, #3
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	4603      	mov	r3, r0
 80033a4:	6978      	ldr	r0, [r7, #20]
 80033a6:	f001 fe5d 	bl	8005064 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	441a      	add	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	441a      	add	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d809      	bhi.n	80033ec <PCD_WriteEmptyTxFifo+0xde>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d203      	bcs.n	80033ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1bf      	bne.n	800336c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d811      	bhi.n	800341c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	2201      	movs	r2, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800340c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	43db      	mvns	r3, r3
 8003412:	6939      	ldr	r1, [r7, #16]
 8003414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003418:	4013      	ands	r3, r2
 800341a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	333c      	adds	r3, #60	@ 0x3c
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d17b      	bne.n	8003556 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d015      	beq.n	8003494 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4a61      	ldr	r2, [pc, #388]	@ (80035f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	f240 80b9 	bls.w	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80b3 	beq.w	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003490:	6093      	str	r3, [r2, #8]
 8003492:	e0a7      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2320      	movs	r3, #32
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	e098      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 8093 	bne.w	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4a4b      	ldr	r2, [pc, #300]	@ (80035f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d90f      	bls.n	80034e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034e2:	6093      	str	r3, [r2, #8]
 80034e4:	e07e      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	0159      	lsls	r1, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	440b      	add	r3, r1
 8003508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d114      	bne.n	8003548 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003530:	461a      	mov	r2, r3
 8003532:	2101      	movs	r1, #1
 8003534:	f002 f82c 	bl	8005590 <USB_EP0_OutStart>
 8003538:	e006      	b.n	8003548 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f004 fb10 	bl	8007b74 <HAL_PCD_DataOutStageCallback>
 8003554:	e046      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4a26      	ldr	r2, [pc, #152]	@ (80035f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d124      	bne.n	80035a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	6093      	str	r3, [r2, #8]
 800357c:	e032      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003594:	461a      	mov	r2, r3
 8003596:	2320      	movs	r3, #32
 8003598:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	4619      	mov	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f004 fae7 	bl	8007b74 <HAL_PCD_DataOutStageCallback>
 80035a6:	e01d      	b.n	80035e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d114      	bne.n	80035d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035d0:	461a      	mov	r2, r3
 80035d2:	2100      	movs	r1, #0
 80035d4:	f001 ffdc 	bl	8005590 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f004 fac8 	bl	8007b74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	4f54300a 	.word	0x4f54300a
 80035f4:	4f54310a 	.word	0x4f54310a

080035f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	333c      	adds	r3, #60	@ 0x3c
 8003610:	3304      	adds	r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <PCD_EP_OutSetupPacket_int+0x88>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d90e      	bls.n	800364c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003644:	461a      	mov	r2, r3
 8003646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800364a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f004 fa7f 	bl	8007b50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <PCD_EP_OutSetupPacket_int+0x88>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d90c      	bls.n	8003674 <PCD_EP_OutSetupPacket_int+0x7c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	799b      	ldrb	r3, [r3, #6]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d108      	bne.n	8003674 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800366c:	461a      	mov	r2, r3
 800366e:	2101      	movs	r1, #1
 8003670:	f001 ff8e 	bl	8005590 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	4f54300a 	.word	0x4f54300a

08003684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
 8003690:	4613      	mov	r3, r2
 8003692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036a2:	883b      	ldrh	r3, [r7, #0]
 80036a4:	0419      	lsls	r1, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b0:	e028      	b.n	8003704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4413      	add	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]
 80036c4:	e00d      	b.n	80036e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	3340      	adds	r3, #64	@ 0x40
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	3301      	adds	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d3ec      	bcc.n	80036c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036ec:	883b      	ldrh	r3, [r7, #0]
 80036ee:	0418      	lsls	r0, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4302      	orrs	r2, r0
 80036fc:	3340      	adds	r3, #64	@ 0x40
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e267      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d075      	beq.n	8003856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	4b88      	ldr	r3, [pc, #544]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00c      	beq.n	8003790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003776:	4b85      	ldr	r3, [pc, #532]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d112      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b82      	ldr	r3, [pc, #520]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800378e:	d10b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	4b7e      	ldr	r3, [pc, #504]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d05b      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d157      	bne.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e242      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x74>
 80037b2:	4b76      	ldr	r3, [pc, #472]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e01d      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x98>
 80037ca:	4b70      	ldr	r3, [pc, #448]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6f      	ldr	r2, [pc, #444]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b6d      	ldr	r3, [pc, #436]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6c      	ldr	r2, [pc, #432]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_RCC_OscConfig+0xb0>
 80037e4:	4b69      	ldr	r3, [pc, #420]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a68      	ldr	r2, [pc, #416]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b66      	ldr	r3, [pc, #408]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a65      	ldr	r2, [pc, #404]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fd fe40 	bl	8001488 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380c:	f7fd fe3c 	bl	8001488 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e207      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b5b      	ldr	r3, [pc, #364]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0xc0>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd fe2c 	bl	8001488 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd fe28 	bl	8001488 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e1f3      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	4b51      	ldr	r3, [pc, #324]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0xe8>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d063      	beq.n	800392a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003862:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386e:	4b47      	ldr	r3, [pc, #284]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	2b08      	cmp	r3, #8
 8003878:	d11c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b44      	ldr	r3, [pc, #272]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d116      	bne.n	80038b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	4b41      	ldr	r3, [pc, #260]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e1c7      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389e:	4b3b      	ldr	r3, [pc, #236]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4937      	ldr	r1, [pc, #220]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	e03a      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <HAL_RCC_OscConfig+0x244>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fd fde1 	bl	8001488 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fd fddd 	bl	8001488 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1a8      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	4b2b      	ldr	r3, [pc, #172]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b28      	ldr	r3, [pc, #160]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4925      	ldr	r1, [pc, #148]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e015      	b.n	800392a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <HAL_RCC_OscConfig+0x244>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fdc0 	bl	8001488 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390c:	f7fd fdbc 	bl	8001488 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e187      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d036      	beq.n	80039a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <HAL_RCC_OscConfig+0x248>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fda0 	bl	8001488 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394c:	f7fd fd9c 	bl	8001488 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e167      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <HAL_RCC_OscConfig+0x240>)
 8003960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x200>
 800396a:	e01b      	b.n	80039a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_RCC_OscConfig+0x248>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003972:	f7fd fd89 	bl	8001488 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	e00e      	b.n	8003998 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397a:	f7fd fd85 	bl	8001488 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d907      	bls.n	8003998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e150      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
 800398c:	40023800 	.word	0x40023800
 8003990:	42470000 	.word	0x42470000
 8003994:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ea      	bne.n	800397a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8097 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b81      	ldr	r3, [pc, #516]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	4b7d      	ldr	r3, [pc, #500]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d2:	4b7a      	ldr	r3, [pc, #488]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b77      	ldr	r3, [pc, #476]	@ (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b74      	ldr	r3, [pc, #464]	@ (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a73      	ldr	r2, [pc, #460]	@ (8003bc0 <HAL_RCC_OscConfig+0x474>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fd45 	bl	8001488 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fd fd41 	bl	8001488 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e10c      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc0 <HAL_RCC_OscConfig+0x474>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x2ea>
 8003a28:	4b64      	ldr	r3, [pc, #400]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2c:	4a63      	ldr	r2, [pc, #396]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a34:	e01c      	b.n	8003a70 <HAL_RCC_OscConfig+0x324>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x30c>
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	4a5e      	ldr	r2, [pc, #376]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0x324>
 8003a58:	4b58      	ldr	r3, [pc, #352]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	4a57      	ldr	r2, [pc, #348]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a64:	4b55      	ldr	r3, [pc, #340]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	4a54      	ldr	r2, [pc, #336]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 0304 	bic.w	r3, r3, #4
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fd06 	bl	8001488 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fd02 	bl	8001488 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0cb      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	4b49      	ldr	r3, [pc, #292]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0ee      	beq.n	8003a80 <HAL_RCC_OscConfig+0x334>
 8003aa2:	e014      	b.n	8003ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fd fcf0 	bl	8001488 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fd fcec 	bl	8001488 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0b5      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1ee      	bne.n	8003aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad4:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	4a38      	ldr	r2, [pc, #224]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80a1 	beq.w	8003c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aea:	4b34      	ldr	r3, [pc, #208]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d05c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d141      	bne.n	8003b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fd fcc0 	bl	8001488 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd fcbc 	bl	8001488 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e087      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	3b01      	subs	r3, #1
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	491b      	ldr	r1, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fc95 	bl	8001488 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd fc91 	bl	8001488 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e05c      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	4b11      	ldr	r3, [pc, #68]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x416>
 8003b80:	e054      	b.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <HAL_RCC_OscConfig+0x478>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fd fc7e 	bl	8001488 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fd fc7a 	bl	8001488 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e045      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <HAL_RCC_OscConfig+0x470>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x444>
 8003bae:	e03d      	b.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e038      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_RCC_OscConfig+0x4ec>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d028      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d121      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d11a      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d111      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d107      	bne.n	8003c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800

08003c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0cc      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c50:	4b68      	ldr	r3, [pc, #416]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d90c      	bls.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b65      	ldr	r3, [pc, #404]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b63      	ldr	r3, [pc, #396]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0b8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d020      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c90:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a58      	ldr	r2, [pc, #352]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ca8:	4b53      	ldr	r3, [pc, #332]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a52      	ldr	r2, [pc, #328]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb4:	4b50      	ldr	r3, [pc, #320]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	494d      	ldr	r1, [pc, #308]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d044      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cda:	4b47      	ldr	r3, [pc, #284]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e07f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e06f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e067      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4934      	ldr	r1, [pc, #208]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fbac 	bl	8001488 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fd fba8 	bl	8001488 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e04f      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b25      	ldr	r3, [pc, #148]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d20c      	bcs.n	8003d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d72:	4b20      	ldr	r3, [pc, #128]	@ (8003df4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e032      	b.n	8003dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4916      	ldr	r1, [pc, #88]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	490e      	ldr	r1, [pc, #56]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dc2:	f000 f821 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	490a      	ldr	r1, [pc, #40]	@ (8003dfc <HAL_RCC_ClockConfig+0x1c0>)
 8003dd4:	5ccb      	ldrb	r3, [r1, r3]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fb0c 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023c00 	.word	0x40023c00
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	08008bc8 	.word	0x08008bc8
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e0c:	b094      	sub	sp, #80	@ 0x50
 8003e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e14:	2300      	movs	r3, #0
 8003e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e18:	2300      	movs	r3, #0
 8003e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e20:	4b79      	ldr	r3, [pc, #484]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d00d      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x40>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	f200 80e1 	bhi.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e3a:	e0db      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b73      	ldr	r3, [pc, #460]	@ (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e40:	e0db      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e42:	4b73      	ldr	r3, [pc, #460]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e46:	e0d8      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e48:	4b6f      	ldr	r3, [pc, #444]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e52:	4b6d      	ldr	r3, [pc, #436]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e72:	2300      	movs	r3, #0
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	0159      	lsls	r1, r3, #5
 8003e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8c:	0150      	lsls	r0, r2, #5
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4621      	mov	r1, r4
 8003e94:	1a51      	subs	r1, r2, r1
 8003e96:	6139      	str	r1, [r7, #16]
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eac:	4659      	mov	r1, fp
 8003eae:	018b      	lsls	r3, r1, #6
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eb6:	4651      	mov	r1, sl
 8003eb8:	018a      	lsls	r2, r1, #6
 8003eba:	4651      	mov	r1, sl
 8003ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ec0:	4659      	mov	r1, fp
 8003ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eda:	4690      	mov	r8, r2
 8003edc:	4699      	mov	r9, r3
 8003ede:	4623      	mov	r3, r4
 8003ee0:	eb18 0303 	adds.w	r3, r8, r3
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	eb49 0303 	adc.w	r3, r9, r3
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003efa:	4629      	mov	r1, r5
 8003efc:	024b      	lsls	r3, r1, #9
 8003efe:	4621      	mov	r1, r4
 8003f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f04:	4621      	mov	r1, r4
 8003f06:	024a      	lsls	r2, r1, #9
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f18:	f7fc fda0 	bl	8000a5c <__aeabi_uldivmod>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4613      	mov	r3, r2
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f24:	e058      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b38      	ldr	r3, [pc, #224]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4611      	mov	r1, r2
 8003f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0159      	lsls	r1, r3, #5
 8003f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f52:	0150      	lsls	r0, r2, #5
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f5e:	4649      	mov	r1, r9
 8003f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f78:	ebb2 040a 	subs.w	r4, r2, sl
 8003f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	00eb      	lsls	r3, r5, #3
 8003f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8e:	00e2      	lsls	r2, r4, #3
 8003f90:	4614      	mov	r4, r2
 8003f92:	461d      	mov	r5, r3
 8003f94:	4643      	mov	r3, r8
 8003f96:	18e3      	adds	r3, r4, r3
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	eb45 0303 	adc.w	r3, r5, r3
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	028b      	lsls	r3, r1, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb8:	4621      	mov	r1, r4
 8003fba:	028a      	lsls	r2, r1, #10
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	61fa      	str	r2, [r7, #28]
 8003fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fcc:	f7fc fd46 	bl	8000a5c <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCC_GetSysClockFreq+0x204>)
 8003ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3750      	adds	r7, #80	@ 0x50
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	007a1200 	.word	0x007a1200

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000000 	.word	0x20000000

0800402c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800402c:	b084      	sub	sp, #16
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	f107 001c 	add.w	r0, r7, #28
 800403a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800403e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004042:	2b01      	cmp	r3, #1
 8004044:	d123      	bne.n	800408e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800405a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800406e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f001 fae2 	bl	800564c <USB_CoreReset>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	e01b      	b.n	80040c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f001 fad6 	bl	800564c <USB_CoreReset>
 80040a0:	4603      	mov	r3, r0
 80040a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80040b8:	e005      	b.n	80040c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040c6:	7fbb      	ldrb	r3, [r7, #30]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10b      	bne.n	80040e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f043 0206 	orr.w	r2, r3, #6
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f0:	b004      	add	sp, #16
 80040f2:	4770      	bx	lr

080040f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d165      	bne.n	80041d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4a41      	ldr	r2, [pc, #260]	@ (8004210 <USB_SetTurnaroundTime+0x11c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d906      	bls.n	800411e <USB_SetTurnaroundTime+0x2a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4a40      	ldr	r2, [pc, #256]	@ (8004214 <USB_SetTurnaroundTime+0x120>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d202      	bcs.n	800411e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004118:	230f      	movs	r3, #15
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	e062      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4a3c      	ldr	r2, [pc, #240]	@ (8004214 <USB_SetTurnaroundTime+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d306      	bcc.n	8004134 <USB_SetTurnaroundTime+0x40>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4a3b      	ldr	r2, [pc, #236]	@ (8004218 <USB_SetTurnaroundTime+0x124>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d202      	bcs.n	8004134 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800412e:	230e      	movs	r3, #14
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e057      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a38      	ldr	r2, [pc, #224]	@ (8004218 <USB_SetTurnaroundTime+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d306      	bcc.n	800414a <USB_SetTurnaroundTime+0x56>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a37      	ldr	r2, [pc, #220]	@ (800421c <USB_SetTurnaroundTime+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d202      	bcs.n	800414a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004144:	230d      	movs	r3, #13
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e04c      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <USB_SetTurnaroundTime+0x128>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d306      	bcc.n	8004160 <USB_SetTurnaroundTime+0x6c>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4a32      	ldr	r2, [pc, #200]	@ (8004220 <USB_SetTurnaroundTime+0x12c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d802      	bhi.n	8004160 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800415a:	230c      	movs	r3, #12
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e041      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a2f      	ldr	r2, [pc, #188]	@ (8004220 <USB_SetTurnaroundTime+0x12c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d906      	bls.n	8004176 <USB_SetTurnaroundTime+0x82>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a2e      	ldr	r2, [pc, #184]	@ (8004224 <USB_SetTurnaroundTime+0x130>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d802      	bhi.n	8004176 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004170:	230b      	movs	r3, #11
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e036      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a2a      	ldr	r2, [pc, #168]	@ (8004224 <USB_SetTurnaroundTime+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d906      	bls.n	800418c <USB_SetTurnaroundTime+0x98>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4a29      	ldr	r2, [pc, #164]	@ (8004228 <USB_SetTurnaroundTime+0x134>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d802      	bhi.n	800418c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004186:	230a      	movs	r3, #10
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e02b      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <USB_SetTurnaroundTime+0x134>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d906      	bls.n	80041a2 <USB_SetTurnaroundTime+0xae>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a25      	ldr	r2, [pc, #148]	@ (800422c <USB_SetTurnaroundTime+0x138>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d202      	bcs.n	80041a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800419c:	2309      	movs	r3, #9
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e020      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a21      	ldr	r2, [pc, #132]	@ (800422c <USB_SetTurnaroundTime+0x138>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d306      	bcc.n	80041b8 <USB_SetTurnaroundTime+0xc4>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4a20      	ldr	r2, [pc, #128]	@ (8004230 <USB_SetTurnaroundTime+0x13c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d802      	bhi.n	80041b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041b2:	2308      	movs	r3, #8
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e015      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004230 <USB_SetTurnaroundTime+0x13c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d906      	bls.n	80041ce <USB_SetTurnaroundTime+0xda>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <USB_SetTurnaroundTime+0x140>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d202      	bcs.n	80041ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041c8:	2307      	movs	r3, #7
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e00a      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041ce:	2306      	movs	r3, #6
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e007      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041da:	2309      	movs	r3, #9
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e001      	b.n	80041e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80041e0:	2309      	movs	r3, #9
 80041e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	00d8acbf 	.word	0x00d8acbf
 8004214:	00e4e1c0 	.word	0x00e4e1c0
 8004218:	00f42400 	.word	0x00f42400
 800421c:	01067380 	.word	0x01067380
 8004220:	011a499f 	.word	0x011a499f
 8004224:	01312cff 	.word	0x01312cff
 8004228:	014ca43f 	.word	0x014ca43f
 800422c:	016e3600 	.word	0x016e3600
 8004230:	01a6ab1f 	.word	0x01a6ab1f
 8004234:	01e84800 	.word	0x01e84800

08004238 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f043 0201 	orr.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d115      	bne.n	80042ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042aa:	200a      	movs	r0, #10
 80042ac:	f7fd f8f8 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	330a      	adds	r3, #10
 80042b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 f939 	bl	800552e <USB_GetMode>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d01e      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80042c6:	d9f0      	bls.n	80042aa <USB_SetCurrentMode+0x2e>
 80042c8:	e01a      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d115      	bne.n	80042fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042dc:	200a      	movs	r0, #10
 80042de:	f7fd f8df 	bl	80014a0 <HAL_Delay>
      ms += 10U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	330a      	adds	r3, #10
 80042e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 f920 	bl	800552e <USB_GetMode>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <USB_SetCurrentMode+0x84>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80042f8:	d9f0      	bls.n	80042dc <USB_SetCurrentMode+0x60>
 80042fa:	e001      	b.n	8004300 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e005      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2bc8      	cmp	r3, #200	@ 0xc8
 8004304:	d101      	bne.n	800430a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004314:	b084      	sub	sp, #16
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e009      	b.n	8004348 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3340      	adds	r3, #64	@ 0x40
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3301      	adds	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b0e      	cmp	r3, #14
 800434c:	d9f2      	bls.n	8004334 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800434e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11c      	bne.n	8004390 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004386:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38
 800438e:	e00b      	b.n	80043a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043ae:	461a      	mov	r2, r3
 80043b0:	2300      	movs	r3, #0
 80043b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10d      	bne.n	80043d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043c4:	2100      	movs	r1, #0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f968 	bl	800469c <USB_SetDevSpeed>
 80043cc:	e008      	b.n	80043e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043ce:	2101      	movs	r1, #1
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f963 	bl	800469c <USB_SetDevSpeed>
 80043d6:	e003      	b.n	80043e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043d8:	2103      	movs	r1, #3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f95e 	bl	800469c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043e0:	2110      	movs	r1, #16
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8fa 	bl	80045dc <USB_FlushTxFifo>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f924 	bl	8004640 <USB_FlushRxFifo>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004414:	461a      	mov	r2, r3
 8004416:	2300      	movs	r3, #0
 8004418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e043      	b.n	80044b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800443e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004442:	d118      	bne.n	8004476 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004456:	461a      	mov	r2, r3
 8004458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e013      	b.n	8004488 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e008      	b.n	8004488 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004482:	461a      	mov	r2, r3
 8004484:	2300      	movs	r3, #0
 8004486:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	3301      	adds	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044b8:	461a      	mov	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4293      	cmp	r3, r2
 80044be:	d3b5      	bcc.n	800442c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e043      	b.n	800454e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044dc:	d118      	bne.n	8004510 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e013      	b.n	8004522 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e008      	b.n	8004522 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	3301      	adds	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004552:	461a      	mov	r2, r3
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4293      	cmp	r3, r2
 8004558:	d3b5      	bcc.n	80044c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800456c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800457a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800457c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <USB_DevInit+0x2c4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800459c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f043 0208 	orr.w	r2, r3, #8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d107      	bne.n	80045c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045d4:	b004      	add	sp, #16
 80045d6:	4770      	bx	lr
 80045d8:	803c3800 	.word	0x803c3800

080045dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045f6:	d901      	bls.n	80045fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e01b      	b.n	8004634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	daf2      	bge.n	80045ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	019b      	lsls	r3, r3, #6
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004620:	d901      	bls.n	8004626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e006      	b.n	8004634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d0f0      	beq.n	8004614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004658:	d901      	bls.n	800465e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e018      	b.n	8004690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	daf2      	bge.n	800464c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2210      	movs	r2, #16
 800466e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800467c:	d901      	bls.n	8004682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e006      	b.n	8004690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d0f0      	beq.n	8004670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d102      	bne.n	80046f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]
 80046f2:	e00a      	b.n	800470a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d002      	beq.n	8004700 <USB_GetDevSpeed+0x32>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d102      	bne.n	8004706 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004700:	2302      	movs	r3, #2
 8004702:	75fb      	strb	r3, [r7, #23]
 8004704:	e001      	b.n	800470a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004706:	230f      	movs	r3, #15
 8004708:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d13a      	bne.n	80047aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004752:	4313      	orrs	r3, r2
 8004754:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d155      	bne.n	8004818 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	791b      	ldrb	r3, [r3, #4]
 8004786:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004788:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004790:	4313      	orrs	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	0151      	lsls	r1, r2, #5
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	440a      	add	r2, r1
 800479a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e036      	b.n	8004818 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	2101      	movs	r1, #1
 80047bc:	fa01 f303 	lsl.w	r3, r1, r3
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11a      	bne.n	8004818 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	791b      	ldrb	r3, [r3, #4]
 80047fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047fe:	430b      	orrs	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004816:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d161      	bne.n	8004908 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800485a:	d11f      	bne.n	800489c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004876:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800487a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004896:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800489a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	43db      	mvns	r3, r3
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048bc:	4013      	ands	r3, r2
 80048be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e0:	4013      	ands	r3, r2
 80048e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fe:	4619      	mov	r1, r3
 8004900:	4b35      	ldr	r3, [pc, #212]	@ (80049d8 <USB_DeactivateEndpoint+0x1b0>)
 8004902:	4013      	ands	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
 8004906:	e060      	b.n	80049ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800491a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800491e:	d11f      	bne.n	8004960 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800493a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800493e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800495a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800495e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	43db      	mvns	r3, r3
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004980:	4013      	ands	r3, r2
 8004982:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	43db      	mvns	r3, r3
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049a4:	4013      	ands	r3, r2
 80049a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0159      	lsls	r1, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	440b      	add	r3, r1
 80049be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c2:	4619      	mov	r1, r3
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <USB_DeactivateEndpoint+0x1b4>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	ec337800 	.word	0xec337800
 80049dc:	eff37800 	.word	0xeff37800

080049e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	f040 817a 	bne.w	8004cf6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d132      	bne.n	8004a70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	0151      	lsls	r1, r2, #5
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	440a      	add	r2, r1
 8004a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a68:	0cdb      	lsrs	r3, r3, #19
 8004a6a:	04db      	lsls	r3, r3, #19
 8004a6c:	6113      	str	r3, [r2, #16]
 8004a6e:	e092      	b.n	8004b96 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a8a:	0cdb      	lsrs	r3, r3, #19
 8004a8c:	04db      	lsls	r3, r3, #19
 8004a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aaa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004aae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ab2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11a      	bne.n	8004af0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d903      	bls.n	8004ace <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aec:	6113      	str	r3, [r2, #16]
 8004aee:	e01b      	b.n	8004b28 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6919      	ldr	r1, [r3, #16]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	440b      	add	r3, r1
 8004b08:	1e59      	subs	r1, r3, #1
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b12:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b14:	4ba2      	ldr	r3, [pc, #648]	@ (8004da0 <USB_EPStartXfer+0x3c0>)
 8004b16:	400b      	ands	r3, r1
 8004b18:	69b9      	ldr	r1, [r7, #24]
 8004b1a:	0148      	lsls	r0, r1, #5
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	4401      	add	r1, r0
 8004b20:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b24:	4313      	orrs	r3, r2
 8004b26:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3e:	69b9      	ldr	r1, [r7, #24]
 8004b40:	0148      	lsls	r0, r1, #5
 8004b42:	69f9      	ldr	r1, [r7, #28]
 8004b44:	4401      	add	r1, r0
 8004b46:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	791b      	ldrb	r3, [r3, #4]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d11f      	bne.n	8004b96 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b70:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004b94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d14b      	bne.n	8004c34 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	791b      	ldrb	r3, [r3, #4]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d128      	bne.n	8004c12 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d110      	bne.n	8004bf2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e00f      	b.n	8004c12 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e165      	b.n	8004f00 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c52:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	791b      	ldrb	r3, [r3, #4]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d015      	beq.n	8004c88 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 814d 	beq.w	8004f00 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	2101      	movs	r1, #1
 8004c78:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7c:	69f9      	ldr	r1, [r7, #28]
 8004c7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c82:	4313      	orrs	r3, r2
 8004c84:	634b      	str	r3, [r1, #52]	@ 0x34
 8004c86:	e13b      	b.n	8004f00 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d110      	bne.n	8004cba <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	0151      	lsls	r1, r2, #5
 8004caa:	69fa      	ldr	r2, [r7, #28]
 8004cac:	440a      	add	r2, r1
 8004cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e00f      	b.n	8004cda <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68d9      	ldr	r1, [r3, #12]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	b298      	uxth	r0, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4603      	mov	r3, r0
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f9b8 	bl	8005064 <USB_WritePacket>
 8004cf4:	e104      	b.n	8004f00 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d10:	0cdb      	lsrs	r3, r3, #19
 8004d12:	04db      	lsls	r3, r3, #19
 8004d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d38:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d131      	bne.n	8004da4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	0148      	lsls	r0, r1, #5
 8004d72:	69f9      	ldr	r1, [r7, #28]
 8004d74:	4401      	add	r1, r0
 8004d76:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d9c:	6113      	str	r3, [r2, #16]
 8004d9e:	e061      	b.n	8004e64 <USB_EPStartXfer+0x484>
 8004da0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d123      	bne.n	8004df4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	0148      	lsls	r0, r1, #5
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	4401      	add	r1, r0
 8004dca:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004df0:	6113      	str	r3, [r2, #16]
 8004df2:	e037      	b.n	8004e64 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	8afa      	ldrh	r2, [r7, #22]
 8004e10:	fb03 f202 	mul.w	r2, r3, r2
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	04d9      	lsls	r1, r3, #19
 8004e2a:	4b38      	ldr	r3, [pc, #224]	@ (8004f0c <USB_EPStartXfer+0x52c>)
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	0148      	lsls	r0, r1, #5
 8004e32:	69f9      	ldr	r1, [r7, #28]
 8004e34:	4401      	add	r1, r0
 8004e36:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	69b9      	ldr	r1, [r7, #24]
 8004e56:	0148      	lsls	r0, r1, #5
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	4401      	add	r1, r0
 8004e5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10d      	bne.n	8004e86 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68d9      	ldr	r1, [r3, #12]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e82:	460a      	mov	r2, r1
 8004e84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	791b      	ldrb	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d128      	bne.n	8004ee0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d110      	bne.n	8004ec0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e00f      	b.n	8004ee0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ede:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	0151      	lsls	r1, r2, #5
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004efa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004efe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	1ff80000 	.word	0x1ff80000

08004f10 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d14a      	bne.n	8004fc4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f46:	f040 8086 	bne.w	8005056 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f6c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	7812      	ldrb	r2, [r2, #0]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d902      	bls.n	8004fa8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa6:	e056      	b.n	8005056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fc0:	d0e7      	beq.n	8004f92 <USB_EPStopXfer+0x82>
 8004fc2:	e048      	b.n	8005056 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fdc:	d13b      	bne.n	8005056 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	7812      	ldrb	r2, [r2, #0]
 8004ff2:	0151      	lsls	r1, r2, #5
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ffc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005000:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	7812      	ldrb	r2, [r2, #0]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3301      	adds	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005032:	4293      	cmp	r3, r2
 8005034:	d902      	bls.n	800503c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
          break;
 800503a:	e00c      	b.n	8005056 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005054:	d0e7      	beq.n	8005026 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005064:	b480      	push	{r7}
 8005066:	b089      	sub	sp, #36	@ 0x24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4611      	mov	r1, r2
 8005070:	461a      	mov	r2, r3
 8005072:	460b      	mov	r3, r1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	4613      	mov	r3, r2
 8005078:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d123      	bne.n	80050d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800508a:	88bb      	ldrh	r3, [r7, #4]
 800508c:	3303      	adds	r3, #3
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	e018      	b.n	80050ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	031a      	lsls	r2, r3, #12
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050a4:	461a      	mov	r2, r3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3301      	adds	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3e2      	bcc.n	8005098 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3724      	adds	r7, #36	@ 0x24
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b08b      	sub	sp, #44	@ 0x2c
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	e014      	b.n	8005136 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	601a      	str	r2, [r3, #0]
    pDest++;
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	3301      	adds	r3, #1
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	3301      	adds	r3, #1
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	3301      	adds	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	3301      	adds	r3, #1
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	3301      	adds	r3, #1
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	6a3a      	ldr	r2, [r7, #32]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	d3e6      	bcc.n	800510c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800513e:	8bfb      	ldrh	r3, [r7, #30]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01e      	beq.n	8005182 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800514e:	461a      	mov	r2, r3
 8005150:	f107 0310 	add.w	r3, r7, #16
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	701a      	strb	r2, [r3, #0]
      i++;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	3301      	adds	r3, #1
 800516e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005176:	8bfb      	ldrh	r3, [r7, #30]
 8005178:	3b01      	subs	r3, #1
 800517a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800517c:	8bfb      	ldrh	r3, [r7, #30]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1ea      	bne.n	8005158 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005184:	4618      	mov	r0, r3
 8005186:	372c      	adds	r7, #44	@ 0x2c
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d12c      	bne.n	8005206 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db12      	blt.n	80051e4 <USB_EPSetStall+0x54>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	e02b      	b.n	800525e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	db12      	blt.n	800523e <USB_EPSetStall+0xae>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00f      	beq.n	800523e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005238:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800523c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800525c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d128      	bne.n	80052da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	791b      	ldrb	r3, [r3, #4]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d003      	beq.n	80052b8 <USB_EPClearStall+0x4c>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	791b      	ldrb	r3, [r3, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d138      	bne.n	800532a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e027      	b.n	800532a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	791b      	ldrb	r3, [r3, #4]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d003      	beq.n	800530a <USB_EPClearStall+0x9e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	791b      	ldrb	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d10f      	bne.n	800532a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005328:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005356:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800535a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053b2:	f023 0302 	bic.w	r3, r3, #2
 80053b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053e0:	f023 0303 	bic.w	r3, r3, #3
 80053e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f4:	f043 0302 	orr.w	r3, r3, #2
 80053f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	b29b      	uxth	r3, r3
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054c4:	68bb      	ldr	r3, [r7, #8]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b087      	sub	sp, #28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	b2db      	uxtb	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4013      	ands	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005520:	68bb      	ldr	r3, [r7, #8]
}
 8005522:	4618      	mov	r0, r3
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0301 	and.w	r3, r3, #1
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005564:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005568:	f023 0307 	bic.w	r3, r3, #7
 800556c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800557c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005580:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	460b      	mov	r3, r1
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	333c      	adds	r3, #60	@ 0x3c
 80055a6:	3304      	adds	r3, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4a26      	ldr	r2, [pc, #152]	@ (8005648 <USB_EP0_OutStart+0xb8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d90a      	bls.n	80055ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055c4:	d101      	bne.n	80055ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e037      	b.n	800563a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d0:	461a      	mov	r2, r3
 80055d2:	2300      	movs	r3, #0
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f8:	f043 0318 	orr.w	r3, r3, #24
 80055fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800560c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005610:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10f      	bne.n	8005638 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005632:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005636:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	4f54300a 	.word	0x4f54300a

0800564c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3301      	adds	r3, #1
 800565c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005664:	d901      	bls.n	800566a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e01b      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	daf2      	bge.n	8005658 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	3301      	adds	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800568e:	d901      	bls.n	8005694 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e006      	b.n	80056a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d0f0      	beq.n	8005682 <USB_CoreReset+0x36>

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
	...

080056b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056bc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80056c0:	f002 fcc2 	bl	8008048 <USBD_static_malloc>
 80056c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	32b0      	adds	r2, #176	@ 0xb0
 80056d6:	2100      	movs	r1, #0
 80056d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056dc:	2302      	movs	r3, #2
 80056de:	e0d4      	b.n	800588a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056e0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80056e4:	2100      	movs	r1, #0
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f002 fd9a 	bl	8008220 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	32b0      	adds	r2, #176	@ 0xb0
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	32b0      	adds	r2, #176	@ 0xb0
 8005706:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7c1b      	ldrb	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d138      	bne.n	800578a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005718:	4b5e      	ldr	r3, [pc, #376]	@ (8005894 <USBD_CDC_Init+0x1e4>)
 800571a:	7819      	ldrb	r1, [r3, #0]
 800571c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005720:	2202      	movs	r2, #2
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f002 fb6d 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005728:	4b5a      	ldr	r3, [pc, #360]	@ (8005894 <USBD_CDC_Init+0x1e4>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3324      	adds	r3, #36	@ 0x24
 800573e:	2201      	movs	r2, #1
 8005740:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005742:	4b55      	ldr	r3, [pc, #340]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 8005744:	7819      	ldrb	r1, [r3, #0]
 8005746:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800574a:	2202      	movs	r2, #2
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f002 fb58 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005752:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800576a:	2201      	movs	r2, #1
 800576c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800576e:	4b4b      	ldr	r3, [pc, #300]	@ (800589c <USBD_CDC_Init+0x1ec>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3326      	adds	r3, #38	@ 0x26
 8005784:	2210      	movs	r2, #16
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e035      	b.n	80057f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800578a:	4b42      	ldr	r3, [pc, #264]	@ (8005894 <USBD_CDC_Init+0x1e4>)
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	2340      	movs	r3, #64	@ 0x40
 8005790:	2202      	movs	r2, #2
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f002 fb35 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <USBD_CDC_Init+0x1e4>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3324      	adds	r3, #36	@ 0x24
 80057ae:	2201      	movs	r2, #1
 80057b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057b2:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 80057b4:	7819      	ldrb	r1, [r3, #0]
 80057b6:	2340      	movs	r3, #64	@ 0x40
 80057b8:	2202      	movs	r2, #2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f002 fb21 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057c0:	4b35      	ldr	r3, [pc, #212]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	f003 020f 	and.w	r2, r3, #15
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057d8:	2201      	movs	r2, #1
 80057da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057dc:	4b2f      	ldr	r3, [pc, #188]	@ (800589c <USBD_CDC_Init+0x1ec>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	3326      	adds	r3, #38	@ 0x26
 80057f2:	2210      	movs	r2, #16
 80057f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057f6:	4b29      	ldr	r3, [pc, #164]	@ (800589c <USBD_CDC_Init+0x1ec>)
 80057f8:	7819      	ldrb	r1, [r3, #0]
 80057fa:	2308      	movs	r3, #8
 80057fc:	2203      	movs	r2, #3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 faff 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <USBD_CDC_Init+0x1ec>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3324      	adds	r3, #36	@ 0x24
 800581a:	2201      	movs	r2, #1
 800581c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	33b0      	adds	r3, #176	@ 0xb0
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005854:	2302      	movs	r3, #2
 8005856:	e018      	b.n	800588a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7c1b      	ldrb	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005860:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 8005862:	7819      	ldrb	r1, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800586a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f002 fbb6 	bl	8007fe0 <USBD_LL_PrepareReceive>
 8005874:	e008      	b.n	8005888 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <USBD_CDC_Init+0x1e8>)
 8005878:	7819      	ldrb	r1, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005880:	2340      	movs	r3, #64	@ 0x40
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f002 fbac 	bl	8007fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000093 	.word	0x20000093
 8005898:	20000094 	.word	0x20000094
 800589c:	20000095 	.word	0x20000095

080058a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005998 <USBD_CDC_DeInit+0xf8>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f002 facb 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058b8:	4b37      	ldr	r3, [pc, #220]	@ (8005998 <USBD_CDC_DeInit+0xf8>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3324      	adds	r3, #36	@ 0x24
 80058ce:	2200      	movs	r2, #0
 80058d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058d2:	4b32      	ldr	r3, [pc, #200]	@ (800599c <USBD_CDC_DeInit+0xfc>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f002 fab8 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058de:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <USBD_CDC_DeInit+0xfc>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80058f6:	2200      	movs	r2, #0
 80058f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80058fa:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <USBD_CDC_DeInit+0x100>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f002 faa4 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005906:	4b26      	ldr	r3, [pc, #152]	@ (80059a0 <USBD_CDC_DeInit+0x100>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 020f 	and.w	r2, r3, #15
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3324      	adds	r3, #36	@ 0x24
 800591c:	2200      	movs	r2, #0
 800591e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005920:	4b1f      	ldr	r3, [pc, #124]	@ (80059a0 <USBD_CDC_DeInit+0x100>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 020f 	and.w	r2, r3, #15
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	3326      	adds	r3, #38	@ 0x26
 8005936:	2200      	movs	r2, #0
 8005938:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	32b0      	adds	r2, #176	@ 0xb0
 8005944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01f      	beq.n	800598c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	33b0      	adds	r3, #176	@ 0xb0
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	32b0      	adds	r2, #176	@ 0xb0
 800596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596e:	4618      	mov	r0, r3
 8005970:	f002 fb78 	bl	8008064 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	32b0      	adds	r2, #176	@ 0xb0
 800597e:	2100      	movs	r1, #0
 8005980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000093 	.word	0x20000093
 800599c:	20000094 	.word	0x20000094
 80059a0:	20000095 	.word	0x20000095

080059a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	32b0      	adds	r2, #176	@ 0xb0
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e0bf      	b.n	8005b54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d050      	beq.n	8005a82 <USBD_CDC_Setup+0xde>
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	f040 80af 	bne.w	8005b44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	88db      	ldrh	r3, [r3, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03a      	beq.n	8005a64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da1b      	bge.n	8005a30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	33b0      	adds	r3, #176	@ 0xb0
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	88d2      	ldrh	r2, [r2, #6]
 8005a14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	88db      	ldrh	r3, [r3, #6]
 8005a1a:	2b07      	cmp	r3, #7
 8005a1c:	bf28      	it	cs
 8005a1e:	2307      	movcs	r3, #7
 8005a20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	89fa      	ldrh	r2, [r7, #14]
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 fd87 	bl	800753c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a2e:	e090      	b.n	8005b52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	785a      	ldrb	r2, [r3, #1]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	88db      	ldrh	r3, [r3, #6]
 8005a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a40:	d803      	bhi.n	8005a4a <USBD_CDC_Setup+0xa6>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	88db      	ldrh	r3, [r3, #6]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	e000      	b.n	8005a4c <USBD_CDC_Setup+0xa8>
 8005a4a:	2240      	movs	r2, #64	@ 0x40
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 fd99 	bl	8007594 <USBD_CtlPrepareRx>
      break;
 8005a62:	e076      	b.n	8005b52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	33b0      	adds	r3, #176	@ 0xb0
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	7850      	ldrb	r0, [r2, #1]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	4798      	blx	r3
      break;
 8005a80:	e067      	b.n	8005b52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b0b      	cmp	r3, #11
 8005a88:	d851      	bhi.n	8005b2e <USBD_CDC_Setup+0x18a>
 8005a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <USBD_CDC_Setup+0xec>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005ac1 	.word	0x08005ac1
 8005a94:	08005b3d 	.word	0x08005b3d
 8005a98:	08005b2f 	.word	0x08005b2f
 8005a9c:	08005b2f 	.word	0x08005b2f
 8005aa0:	08005b2f 	.word	0x08005b2f
 8005aa4:	08005b2f 	.word	0x08005b2f
 8005aa8:	08005b2f 	.word	0x08005b2f
 8005aac:	08005b2f 	.word	0x08005b2f
 8005ab0:	08005b2f 	.word	0x08005b2f
 8005ab4:	08005b2f 	.word	0x08005b2f
 8005ab8:	08005aeb 	.word	0x08005aeb
 8005abc:	08005b15 	.word	0x08005b15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d107      	bne.n	8005adc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005acc:	f107 030a 	add.w	r3, r7, #10
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f001 fd31 	bl	800753c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ada:	e032      	b.n	8005b42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 fcbb 	bl	800745a <USBD_CtlError>
            ret = USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ae8:	e02b      	b.n	8005b42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005af6:	f107 030d 	add.w	r3, r7, #13
 8005afa:	2201      	movs	r2, #1
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 fd1c 	bl	800753c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b04:	e01d      	b.n	8005b42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fca6 	bl	800745a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	75fb      	strb	r3, [r7, #23]
          break;
 8005b12:	e016      	b.n	8005b42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d00f      	beq.n	8005b40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f001 fc99 	bl	800745a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b2c:	e008      	b.n	8005b40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f001 fc92 	bl	800745a <USBD_CtlError>
          ret = USBD_FAIL;
 8005b36:	2303      	movs	r3, #3
 8005b38:	75fb      	strb	r3, [r7, #23]
          break;
 8005b3a:	e002      	b.n	8005b42 <USBD_CDC_Setup+0x19e>
          break;
 8005b3c:	bf00      	nop
 8005b3e:	e008      	b.n	8005b52 <USBD_CDC_Setup+0x1ae>
          break;
 8005b40:	bf00      	nop
      }
      break;
 8005b42:	e006      	b.n	8005b52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fc87 	bl	800745a <USBD_CtlError>
      ret = USBD_FAIL;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005b6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	32b0      	adds	r2, #176	@ 0xb0
 8005b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e065      	b.n	8005c52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	32b0      	adds	r2, #176	@ 0xb0
 8005b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3318      	adds	r3, #24
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d02f      	beq.n	8005c10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 020f 	and.w	r2, r3, #15
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	f003 010f 	and.w	r1, r3, #15
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	440b      	add	r3, r1
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4403      	add	r3, r0
 8005bd8:	331c      	adds	r3, #28
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d112      	bne.n	8005c10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c02:	78f9      	ldrb	r1, [r7, #3]
 8005c04:	2300      	movs	r3, #0
 8005c06:	2200      	movs	r2, #0
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f002 f9c8 	bl	8007f9e <USBD_LL_Transmit>
 8005c0e:	e01f      	b.n	8005c50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	33b0      	adds	r3, #176	@ 0xb0
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	33b0      	adds	r3, #176	@ 0xb0
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	32b0      	adds	r2, #176	@ 0xb0
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	32b0      	adds	r2, #176	@ 0xb0
 8005c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e01a      	b.n	8005cc2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 f9c6 	bl	8008022 <USBD_LL_GetRxDataSize>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	33b0      	adds	r3, #176	@ 0xb0
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	32b0      	adds	r2, #176	@ 0xb0
 8005cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e024      	b.n	8005d36 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	33b0      	adds	r3, #176	@ 0xb0
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <USBD_CDC_EP0_RxReady+0x6a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d06:	2bff      	cmp	r3, #255	@ 0xff
 8005d08:	d014      	beq.n	8005d34 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	33b0      	adds	r3, #176	@ 0xb0
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22ff      	movs	r2, #255	@ 0xff
 8005d30:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d48:	2182      	movs	r1, #130	@ 0x82
 8005d4a:	4818      	ldr	r0, [pc, #96]	@ (8005dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d4c:	f000 fd4f 	bl	80067ee <USBD_GetEpDesc>
 8005d50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d52:	2101      	movs	r1, #1
 8005d54:	4815      	ldr	r0, [pc, #84]	@ (8005dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d56:	f000 fd4a 	bl	80067ee <USBD_GetEpDesc>
 8005d5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d5c:	2181      	movs	r1, #129	@ 0x81
 8005d5e:	4813      	ldr	r0, [pc, #76]	@ (8005dac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d60:	f000 fd45 	bl	80067ee <USBD_GetEpDesc>
 8005d64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d80:	711a      	strb	r2, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d94:	711a      	strb	r2, [r3, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2243      	movs	r2, #67	@ 0x43
 8005d9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da0:	4b02      	ldr	r3, [pc, #8]	@ (8005dac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000050 	.word	0x20000050

08005db0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005db8:	2182      	movs	r1, #130	@ 0x82
 8005dba:	4818      	ldr	r0, [pc, #96]	@ (8005e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dbc:	f000 fd17 	bl	80067ee <USBD_GetEpDesc>
 8005dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	4815      	ldr	r0, [pc, #84]	@ (8005e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dc6:	f000 fd12 	bl	80067ee <USBD_GetEpDesc>
 8005dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dcc:	2181      	movs	r1, #129	@ 0x81
 8005dce:	4813      	ldr	r0, [pc, #76]	@ (8005e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dd0:	f000 fd0d 	bl	80067ee <USBD_GetEpDesc>
 8005dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2210      	movs	r2, #16
 8005de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d006      	beq.n	8005df6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	711a      	strb	r2, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f042 0202 	orr.w	r2, r2, #2
 8005df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	711a      	strb	r2, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f042 0202 	orr.w	r2, r2, #2
 8005e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2243      	movs	r2, #67	@ 0x43
 8005e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e10:	4b02      	ldr	r3, [pc, #8]	@ (8005e1c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000050 	.word	0x20000050

08005e20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e28:	2182      	movs	r1, #130	@ 0x82
 8005e2a:	4818      	ldr	r0, [pc, #96]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e2c:	f000 fcdf 	bl	80067ee <USBD_GetEpDesc>
 8005e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e32:	2101      	movs	r1, #1
 8005e34:	4815      	ldr	r0, [pc, #84]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e36:	f000 fcda 	bl	80067ee <USBD_GetEpDesc>
 8005e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e3c:	2181      	movs	r1, #129	@ 0x81
 8005e3e:	4813      	ldr	r0, [pc, #76]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e40:	f000 fcd5 	bl	80067ee <USBD_GetEpDesc>
 8005e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d006      	beq.n	8005e66 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e60:	711a      	strb	r2, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d006      	beq.n	8005e7a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e74:	711a      	strb	r2, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2243      	movs	r2, #67	@ 0x43
 8005e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e80:	4b02      	ldr	r3, [pc, #8]	@ (8005e8c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000050 	.word	0x20000050

08005e90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	@ (8005eac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e009      	b.n	8005ed8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	33b0      	adds	r3, #176	@ 0xb0
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	32b0      	adds	r2, #176	@ 0xb0
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e008      	b.n	8005f1c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	32b0      	adds	r2, #176	@ 0xb0
 8005f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e004      	b.n	8005f56 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
	...

08005f64 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32b0      	adds	r2, #176	@ 0xb0
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e025      	b.n	8005fd6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d11f      	bne.n	8005fd4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f9c:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <USBD_CDC_TransmitPacket+0x7c>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4403      	add	r3, r0
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fba:	4b09      	ldr	r3, [pc, #36]	@ (8005fe0 <USBD_CDC_TransmitPacket+0x7c>)
 8005fbc:	7819      	ldrb	r1, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 ffe7 	bl	8007f9e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000093 	.word	0x20000093

08005fe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32b0      	adds	r2, #176	@ 0xb0
 8005ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	32b0      	adds	r2, #176	@ 0xb0
 8006006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800600e:	2303      	movs	r3, #3
 8006010:	e018      	b.n	8006044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7c1b      	ldrb	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800601a:	4b0c      	ldr	r3, [pc, #48]	@ (800604c <USBD_CDC_ReceivePacket+0x68>)
 800601c:	7819      	ldrb	r1, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 ffd9 	bl	8007fe0 <USBD_LL_PrepareReceive>
 800602e:	e008      	b.n	8006042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006030:	4b06      	ldr	r3, [pc, #24]	@ (800604c <USBD_CDC_ReceivePacket+0x68>)
 8006032:	7819      	ldrb	r1, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800603a:	2340      	movs	r3, #64	@ 0x40
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 ffcf 	bl	8007fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20000094 	.word	0x20000094

08006050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006064:	2303      	movs	r3, #3
 8006066:	e01f      	b.n	80060a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	79fa      	ldrb	r2, [r7, #7]
 800609a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f001 fe49 	bl	8007d34 <USBD_LL_Init>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e025      	b.n	8006114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	32ae      	adds	r2, #174	@ 0xae
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00f      	beq.n	8006104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32ae      	adds	r2, #174	@ 0xae
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f4:	f107 020e 	add.w	r2, r7, #14
 80060f8:	4610      	mov	r0, r2
 80060fa:	4798      	blx	r3
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 fe51 	bl	8007dcc <USBD_LL_Start>
 800612a:	4603      	mov	r3, r0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006178:	7bfb      	ldrb	r3, [r7, #15]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	78fa      	ldrb	r2, [r7, #3]
 800619c:	4611      	mov	r1, r2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f90c 	bl	80073e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d01a      	beq.n	8006228 <USBD_LL_SetupStage+0x72>
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d822      	bhi.n	800623c <USBD_LL_SetupStage+0x86>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <USBD_LL_SetupStage+0x4a>
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d00a      	beq.n	8006214 <USBD_LL_SetupStage+0x5e>
 80061fe:	e01d      	b.n	800623c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb63 	bl	80068d4 <USBD_StdDevReq>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
      break;
 8006212:	e020      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fbcb 	bl	80069b8 <USBD_StdItfReq>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
      break;
 8006226:	e016      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fc2d 	bl	8006a90 <USBD_StdEPReq>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
      break;
 800623a:	e00c      	b.n	8006256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006242:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 fe1e 	bl	8007e8c <USBD_LL_StallEP>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
      break;
 8006254:	bf00      	nop
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	460b      	mov	r3, r1
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d16e      	bne.n	8006356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800627e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006286:	2b03      	cmp	r3, #3
 8006288:	f040 8098 	bne.w	80063bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d913      	bls.n	80062c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	1ad2      	subs	r2, r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4293      	cmp	r3, r2
 80062b0:	bf28      	it	cs
 80062b2:	4613      	movcs	r3, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 f988 	bl	80075ce <USBD_CtlContinueRx>
 80062be:	e07d      	b.n	80063bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d014      	beq.n	80062f8 <USBD_LL_DataOutStage+0x98>
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d81d      	bhi.n	800630e <USBD_LL_DataOutStage+0xae>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <USBD_LL_DataOutStage+0x7c>
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d003      	beq.n	80062e2 <USBD_LL_DataOutStage+0x82>
 80062da:	e018      	b.n	800630e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	75bb      	strb	r3, [r7, #22]
            break;
 80062e0:	e018      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fa64 	bl	80067ba <USBD_CoreFindIF>
 80062f2:	4603      	mov	r3, r0
 80062f4:	75bb      	strb	r3, [r7, #22]
            break;
 80062f6:	e00d      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fa66 	bl	80067d4 <USBD_CoreFindEP>
 8006308:	4603      	mov	r3, r0
 800630a:	75bb      	strb	r3, [r7, #22]
            break;
 800630c:	e002      	b.n	8006314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	75bb      	strb	r3, [r7, #22]
            break;
 8006312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006314:	7dbb      	ldrb	r3, [r7, #22]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b03      	cmp	r3, #3
 8006324:	d113      	bne.n	800634e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006326:	7dba      	ldrb	r2, [r7, #22]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	32ae      	adds	r2, #174	@ 0xae
 800632c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00b      	beq.n	800634e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006336:	7dba      	ldrb	r2, [r7, #22]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800633e:	7dba      	ldrb	r2, [r7, #22]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	32ae      	adds	r2, #174	@ 0xae
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 f94e 	bl	80075f0 <USBD_CtlSendStatus>
 8006354:	e032      	b.n	80063bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006356:	7afb      	ldrb	r3, [r7, #11]
 8006358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fa37 	bl	80067d4 <USBD_CoreFindEP>
 8006366:	4603      	mov	r3, r0
 8006368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800636a:	7dbb      	ldrb	r3, [r7, #22]
 800636c:	2bff      	cmp	r3, #255	@ 0xff
 800636e:	d025      	beq.n	80063bc <USBD_LL_DataOutStage+0x15c>
 8006370:	7dbb      	ldrb	r3, [r7, #22]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d122      	bne.n	80063bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b03      	cmp	r3, #3
 8006380:	d117      	bne.n	80063b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006382:	7dba      	ldrb	r2, [r7, #22]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	32ae      	adds	r2, #174	@ 0xae
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00f      	beq.n	80063b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006392:	7dba      	ldrb	r2, [r7, #22]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800639a:	7dba      	ldrb	r2, [r7, #22]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	32ae      	adds	r2, #174	@ 0xae
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	7afa      	ldrb	r2, [r7, #11]
 80063a8:	4611      	mov	r1, r2
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
 80063ba:	e000      	b.n	80063be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b086      	sub	sp, #24
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	460b      	mov	r3, r1
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063d4:	7afb      	ldrb	r3, [r7, #11]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d16f      	bne.n	80064ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3314      	adds	r3, #20
 80063de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d15a      	bne.n	80064a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d914      	bls.n	8006420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	461a      	mov	r2, r3
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f001 f8b0 	bl	8007572 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006412:	2300      	movs	r3, #0
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f001 fde1 	bl	8007fe0 <USBD_LL_PrepareReceive>
 800641e:	e03f      	b.n	80064a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	429a      	cmp	r2, r3
 800642a:	d11c      	bne.n	8006466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006434:	429a      	cmp	r2, r3
 8006436:	d316      	bcc.n	8006466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006442:	429a      	cmp	r2, r3
 8006444:	d20f      	bcs.n	8006466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 f891 	bl	8007572 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006458:	2300      	movs	r3, #0
 800645a:	2200      	movs	r2, #0
 800645c:	2100      	movs	r1, #0
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f001 fdbe 	bl	8007fe0 <USBD_LL_PrepareReceive>
 8006464:	e01c      	b.n	80064a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b03      	cmp	r3, #3
 8006470:	d10f      	bne.n	8006492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f001 fcf9 	bl	8007e8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f001 f8bb 	bl	8007616 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d03a      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7ff fe42 	bl	8006134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064b8:	e032      	b.n	8006520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f985 	bl	80067d4 <USBD_CoreFindEP>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	2bff      	cmp	r3, #255	@ 0xff
 80064d2:	d025      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d122      	bne.n	8006520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d11c      	bne.n	8006520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064e6:	7dfa      	ldrb	r2, [r7, #23]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	32ae      	adds	r2, #174	@ 0xae
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d014      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80064f6:	7dfa      	ldrb	r2, [r7, #23]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80064fe:	7dfa      	ldrb	r2, [r7, #23]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	32ae      	adds	r2, #174	@ 0xae
 8006504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	7afa      	ldrb	r2, [r7, #11]
 800650c:	4611      	mov	r1, r2
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	4798      	blx	r3
 8006512:	4603      	mov	r3, r0
 8006514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800651c:	7dbb      	ldrb	r3, [r7, #22]
 800651e:	e000      	b.n	8006522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d014      	beq.n	8006590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6852      	ldr	r2, [r2, #4]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	4611      	mov	r1, r2
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006590:	2340      	movs	r3, #64	@ 0x40
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fc33 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2240      	movs	r2, #64	@ 0x40
 80065a8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065ac:	2340      	movs	r3, #64	@ 0x40
 80065ae:	2200      	movs	r2, #0
 80065b0:	2180      	movs	r1, #128	@ 0x80
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fc25 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	621a      	str	r2, [r3, #32]

  return ret;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d006      	beq.n	8006610 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2204      	movs	r2, #4
 8006614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b04      	cmp	r3, #4
 8006638:	d106      	bne.n	8006648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006640:	b2da      	uxtb	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b03      	cmp	r3, #3
 8006668:	d110      	bne.n	800668c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32ae      	adds	r2, #174	@ 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01c      	b.n	80066f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d115      	bne.n	80066f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32ae      	adds	r2, #174	@ 0xae
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	@ 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	4611      	mov	r1, r2
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	32ae      	adds	r2, #174	@ 0xae
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006718:	2303      	movs	r3, #3
 800671a:	e01c      	b.n	8006756 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b03      	cmp	r3, #3
 8006726:	d115      	bne.n	8006754 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	@ 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	32ae      	adds	r2, #174	@ 0xae
 8006746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	4611      	mov	r1, r2
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6852      	ldr	r2, [r2, #4]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	4611      	mov	r1, r2
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067ac:	2303      	movs	r3, #3
 80067ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	b29b      	uxth	r3, r3
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	4293      	cmp	r3, r2
 8006812:	d91f      	bls.n	8006854 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800681a:	e013      	b.n	8006844 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800681c:	f107 030a 	add.w	r3, r7, #10
 8006820:	4619      	mov	r1, r3
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f000 f81b 	bl	800685e <USBD_GetNextDesc>
 8006828:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d108      	bne.n	8006844 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	789b      	ldrb	r3, [r3, #2]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	429a      	cmp	r2, r3
 800683e:	d008      	beq.n	8006852 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	885b      	ldrh	r3, [r3, #2]
 8006848:	b29a      	uxth	r2, r3
 800684a:	897b      	ldrh	r3, [r7, #10]
 800684c:	429a      	cmp	r2, r3
 800684e:	d8e5      	bhi.n	800681c <USBD_GetEpDesc+0x2e>
 8006850:	e000      	b.n	8006854 <USBD_GetEpDesc+0x66>
          break;
 8006852:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006854:	693b      	ldr	r3, [r7, #16]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	4413      	add	r3, r2
 8006876:	b29a      	uxth	r2, r3
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3301      	adds	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068b4:	8a3b      	ldrh	r3, [r7, #16]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	b21a      	sxth	r2, r3
 80068ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068be:	4313      	orrs	r3, r2
 80068c0:	b21b      	sxth	r3, r3
 80068c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068c4:	89fb      	ldrh	r3, [r7, #14]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d005      	beq.n	80068fa <USBD_StdDevReq+0x26>
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d857      	bhi.n	80069a2 <USBD_StdDevReq+0xce>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00f      	beq.n	8006916 <USBD_StdDevReq+0x42>
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d153      	bne.n	80069a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	32ae      	adds	r2, #174	@ 0xae
 8006904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]
      break;
 8006914:	e04a      	b.n	80069ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b09      	cmp	r3, #9
 800691c:	d83b      	bhi.n	8006996 <USBD_StdDevReq+0xc2>
 800691e:	a201      	add	r2, pc, #4	@ (adr r2, 8006924 <USBD_StdDevReq+0x50>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006979 	.word	0x08006979
 8006928:	0800698d 	.word	0x0800698d
 800692c:	08006997 	.word	0x08006997
 8006930:	08006983 	.word	0x08006983
 8006934:	08006997 	.word	0x08006997
 8006938:	08006957 	.word	0x08006957
 800693c:	0800694d 	.word	0x0800694d
 8006940:	08006997 	.word	0x08006997
 8006944:	0800696f 	.word	0x0800696f
 8006948:	08006961 	.word	0x08006961
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa3c 	bl	8006dcc <USBD_GetDescriptor>
          break;
 8006954:	e024      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fba1 	bl	80070a0 <USBD_SetAddress>
          break;
 800695e:	e01f      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fbe0 	bl	8007128 <USBD_SetConfig>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
          break;
 800696c:	e018      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fc83 	bl	800727c <USBD_GetConfig>
          break;
 8006976:	e013      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fcb4 	bl	80072e8 <USBD_GetStatus>
          break;
 8006980:	e00e      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fce3 	bl	8007350 <USBD_SetFeature>
          break;
 800698a:	e009      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd07 	bl	80073a2 <USBD_ClrFeature>
          break;
 8006994:	e004      	b.n	80069a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006996:	6839      	ldr	r1, [r7, #0]
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fd5e 	bl	800745a <USBD_CtlError>
          break;
 800699e:	bf00      	nop
      }
      break;
 80069a0:	e004      	b.n	80069ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fd58 	bl	800745a <USBD_CtlError>
      break;
 80069aa:	bf00      	nop
  }

  return ret;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop

080069b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069ce:	2b40      	cmp	r3, #64	@ 0x40
 80069d0:	d005      	beq.n	80069de <USBD_StdItfReq+0x26>
 80069d2:	2b40      	cmp	r3, #64	@ 0x40
 80069d4:	d852      	bhi.n	8006a7c <USBD_StdItfReq+0xc4>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <USBD_StdItfReq+0x26>
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d14e      	bne.n	8006a7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d840      	bhi.n	8006a6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	889b      	ldrh	r3, [r3, #4]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d836      	bhi.n	8006a64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	889b      	ldrh	r3, [r3, #4]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fedb 	bl	80067ba <USBD_CoreFindIF>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2bff      	cmp	r3, #255	@ 0xff
 8006a0c:	d01d      	beq.n	8006a4a <USBD_StdItfReq+0x92>
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d11a      	bne.n	8006a4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a14:	7bba      	ldrb	r2, [r7, #14]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	32ae      	adds	r2, #174	@ 0xae
 8006a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00f      	beq.n	8006a44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a24:	7bba      	ldrb	r2, [r7, #14]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a2c:	7bba      	ldrb	r2, [r7, #14]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	32ae      	adds	r2, #174	@ 0xae
 8006a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a42:	e004      	b.n	8006a4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a48:	e001      	b.n	8006a4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d110      	bne.n	8006a78 <USBD_StdItfReq+0xc0>
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fdc7 	bl	80075f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a62:	e009      	b.n	8006a78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fcf7 	bl	800745a <USBD_CtlError>
          break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fcf2 	bl	800745a <USBD_CtlError>
          break;
 8006a76:	e000      	b.n	8006a7a <USBD_StdItfReq+0xc2>
          break;
 8006a78:	bf00      	nop
      }
      break;
 8006a7a:	e004      	b.n	8006a86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fceb 	bl	800745a <USBD_CtlError>
      break;
 8006a84:	bf00      	nop
  }

  return ret;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	889b      	ldrh	r3, [r3, #4]
 8006aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aac:	2b40      	cmp	r3, #64	@ 0x40
 8006aae:	d007      	beq.n	8006ac0 <USBD_StdEPReq+0x30>
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	f200 817f 	bhi.w	8006db4 <USBD_StdEPReq+0x324>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d02a      	beq.n	8006b10 <USBD_StdEPReq+0x80>
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	f040 817a 	bne.w	8006db4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff fe85 	bl	80067d4 <USBD_CoreFindEP>
 8006aca:	4603      	mov	r3, r0
 8006acc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ace:	7b7b      	ldrb	r3, [r7, #13]
 8006ad0:	2bff      	cmp	r3, #255	@ 0xff
 8006ad2:	f000 8174 	beq.w	8006dbe <USBD_StdEPReq+0x32e>
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f040 8170 	bne.w	8006dbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006ade:	7b7a      	ldrb	r2, [r7, #13]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ae6:	7b7a      	ldrb	r2, [r7, #13]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	32ae      	adds	r2, #174	@ 0xae
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8163 	beq.w	8006dbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006af8:	7b7a      	ldrb	r2, [r7, #13]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32ae      	adds	r2, #174	@ 0xae
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b0e:	e156      	b.n	8006dbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d008      	beq.n	8006b2a <USBD_StdEPReq+0x9a>
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	f300 8145 	bgt.w	8006da8 <USBD_StdEPReq+0x318>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 809b 	beq.w	8006c5a <USBD_StdEPReq+0x1ca>
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d03c      	beq.n	8006ba2 <USBD_StdEPReq+0x112>
 8006b28:	e13e      	b.n	8006da8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d002      	beq.n	8006b3c <USBD_StdEPReq+0xac>
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d016      	beq.n	8006b68 <USBD_StdEPReq+0xd8>
 8006b3a:	e02c      	b.n	8006b96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <USBD_StdEPReq+0xce>
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	2b80      	cmp	r3, #128	@ 0x80
 8006b46:	d00a      	beq.n	8006b5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 f99d 	bl	8007e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b52:	2180      	movs	r1, #128	@ 0x80
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f999 	bl	8007e8c <USBD_LL_StallEP>
 8006b5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b5c:	e020      	b.n	8006ba0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc7a 	bl	800745a <USBD_CtlError>
              break;
 8006b66:	e01b      	b.n	8006ba0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	885b      	ldrh	r3, [r3, #2]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10e      	bne.n	8006b8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <USBD_StdEPReq+0xfe>
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d008      	beq.n	8006b8e <USBD_StdEPReq+0xfe>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	88db      	ldrh	r3, [r3, #6]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f97f 	bl	8007e8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fd2e 	bl	80075f0 <USBD_CtlSendStatus>

              break;
 8006b94:	e004      	b.n	8006ba0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fc5e 	bl	800745a <USBD_CtlError>
              break;
 8006b9e:	bf00      	nop
          }
          break;
 8006ba0:	e107      	b.n	8006db2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d002      	beq.n	8006bb4 <USBD_StdEPReq+0x124>
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d016      	beq.n	8006be0 <USBD_StdEPReq+0x150>
 8006bb2:	e04b      	b.n	8006c4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <USBD_StdEPReq+0x146>
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b80      	cmp	r3, #128	@ 0x80
 8006bbe:	d00a      	beq.n	8006bd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f961 	bl	8007e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bca:	2180      	movs	r1, #128	@ 0x80
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f95d 	bl	8007e8c <USBD_LL_StallEP>
 8006bd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bd4:	e040      	b.n	8006c58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fc3e 	bl	800745a <USBD_CtlError>
              break;
 8006bde:	e03b      	b.n	8006c58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	885b      	ldrh	r3, [r3, #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d136      	bne.n	8006c56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f967 	bl	8007eca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fcf7 	bl	80075f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fde4 	bl	80067d4 <USBD_CoreFindEP>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c10:	7b7b      	ldrb	r3, [r7, #13]
 8006c12:	2bff      	cmp	r3, #255	@ 0xff
 8006c14:	d01f      	beq.n	8006c56 <USBD_StdEPReq+0x1c6>
 8006c16:	7b7b      	ldrb	r3, [r7, #13]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11c      	bne.n	8006c56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c1c:	7b7a      	ldrb	r2, [r7, #13]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c24:	7b7a      	ldrb	r2, [r7, #13]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	32ae      	adds	r2, #174	@ 0xae
 8006c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c34:	7b7a      	ldrb	r2, [r7, #13]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	@ 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c4a:	e004      	b.n	8006c56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fc03 	bl	800745a <USBD_CtlError>
              break;
 8006c54:	e000      	b.n	8006c58 <USBD_StdEPReq+0x1c8>
              break;
 8006c56:	bf00      	nop
          }
          break;
 8006c58:	e0ab      	b.n	8006db2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d002      	beq.n	8006c6c <USBD_StdEPReq+0x1dc>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d032      	beq.n	8006cd0 <USBD_StdEPReq+0x240>
 8006c6a:	e097      	b.n	8006d9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <USBD_StdEPReq+0x1f2>
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b80      	cmp	r3, #128	@ 0x80
 8006c76:	d004      	beq.n	8006c82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fbed 	bl	800745a <USBD_CtlError>
                break;
 8006c80:	e091      	b.n	8006da6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	da0b      	bge.n	8006ca2 <USBD_StdEPReq+0x212>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	3310      	adds	r3, #16
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	e00b      	b.n	8006cba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3304      	adds	r3, #4
 8006cba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc37 	bl	800753c <USBD_CtlSendData>
              break;
 8006cce:	e06a      	b.n	8006da6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	da11      	bge.n	8006cfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	f003 020f 	and.w	r2, r3, #15
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3324      	adds	r3, #36	@ 0x24
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d117      	bne.n	8006d22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fbb0 	bl	800745a <USBD_CtlError>
                  break;
 8006cfa:	e054      	b.n	8006da6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fb9d 	bl	800745a <USBD_CtlError>
                  break;
 8006d20:	e041      	b.n	8006da6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da0b      	bge.n	8006d42 <USBD_StdEPReq+0x2b2>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	3310      	adds	r3, #16
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3304      	adds	r3, #4
 8006d40:	e00b      	b.n	8006d5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	4413      	add	r3, r2
 8006d58:	3304      	adds	r3, #4
 8006d5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <USBD_StdEPReq+0x2d8>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	@ 0x80
 8006d66:	d103      	bne.n	8006d70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e00e      	b.n	8006d8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f8c7 	bl	8007f08 <USBD_LL_IsStallEP>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fbd1 	bl	800753c <USBD_CtlSendData>
              break;
 8006d9a:	e004      	b.n	8006da6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fb5b 	bl	800745a <USBD_CtlError>
              break;
 8006da4:	bf00      	nop
          }
          break;
 8006da6:	e004      	b.n	8006db2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb55 	bl	800745a <USBD_CtlError>
          break;
 8006db0:	bf00      	nop
      }
      break;
 8006db2:	e005      	b.n	8006dc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fb4f 	bl	800745a <USBD_CtlError>
      break;
 8006dbc:	e000      	b.n	8006dc0 <USBD_StdEPReq+0x330>
      break;
 8006dbe:	bf00      	nop
  }

  return ret;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	0a1b      	lsrs	r3, r3, #8
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	2b06      	cmp	r3, #6
 8006dee:	f200 8128 	bhi.w	8007042 <USBD_GetDescriptor+0x276>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <USBD_GetDescriptor+0x2c>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e15 	.word	0x08006e15
 8006dfc:	08006e2d 	.word	0x08006e2d
 8006e00:	08006e6d 	.word	0x08006e6d
 8006e04:	08007043 	.word	0x08007043
 8006e08:	08007043 	.word	0x08007043
 8006e0c:	08006fe3 	.word	0x08006fe3
 8006e10:	0800700f 	.word	0x0800700f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
      break;
 8006e2a:	e112      	b.n	8007052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7c1b      	ldrb	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10d      	bne.n	8006e50 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f107 0208 	add.w	r2, r7, #8
 8006e40:	4610      	mov	r0, r2
 8006e42:	4798      	blx	r3
 8006e44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e4e:	e100      	b.n	8007052 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e58:	f107 0208 	add.w	r2, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	2202      	movs	r2, #2
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e0f2      	b.n	8007052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	885b      	ldrh	r3, [r3, #2]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	f200 80ac 	bhi.w	8006fd0 <USBD_GetDescriptor+0x204>
 8006e78:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <USBD_GetDescriptor+0xb4>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006f35 	.word	0x08006f35
 8006e90:	08006f69 	.word	0x08006f69
 8006e94:	08006f9d 	.word	0x08006f9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eba:	e091      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 facb 	bl	800745a <USBD_CtlError>
            err++;
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eca:	e089      	b.n	8006fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00b      	beq.n	8006ef0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	7c12      	ldrb	r2, [r2, #16]
 8006ee4:	f107 0108 	add.w	r1, r7, #8
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
 8006eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eee:	e077      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fab1 	bl	800745a <USBD_CtlError>
            err++;
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	3301      	adds	r3, #1
 8006efc:	72fb      	strb	r3, [r7, #11]
          break;
 8006efe:	e06f      	b.n	8006fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7c12      	ldrb	r2, [r2, #16]
 8006f18:	f107 0108 	add.w	r1, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f22:	e05d      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa97 	bl	800745a <USBD_CtlError>
            err++;
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	72fb      	strb	r3, [r7, #11]
          break;
 8006f32:	e055      	b.n	8006fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7c12      	ldrb	r2, [r2, #16]
 8006f4c:	f107 0108 	add.w	r1, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f56:	e043      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa7d 	bl	800745a <USBD_CtlError>
            err++;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	3301      	adds	r3, #1
 8006f64:	72fb      	strb	r3, [r7, #11]
          break;
 8006f66:	e03b      	b.n	8006fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	7c12      	ldrb	r2, [r2, #16]
 8006f80:	f107 0108 	add.w	r1, r7, #8
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
 8006f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f8a:	e029      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa63 	bl	800745a <USBD_CtlError>
            err++;
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	3301      	adds	r3, #1
 8006f98:	72fb      	strb	r3, [r7, #11]
          break;
 8006f9a:	e021      	b.n	8006fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00b      	beq.n	8006fc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7c12      	ldrb	r2, [r2, #16]
 8006fb4:	f107 0108 	add.w	r1, r7, #8
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fbe:	e00f      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa49 	bl	800745a <USBD_CtlError>
            err++;
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fce:	e007      	b.n	8006fe0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa41 	bl	800745a <USBD_CtlError>
          err++;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006fde:	bf00      	nop
      }
      break;
 8006fe0:	e037      	b.n	8007052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7c1b      	ldrb	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff2:	f107 0208 	add.w	r2, r7, #8
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4798      	blx	r3
 8006ffa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ffc:	e029      	b.n	8007052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fa2a 	bl	800745a <USBD_CtlError>
        err++;
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	3301      	adds	r3, #1
 800700a:	72fb      	strb	r3, [r7, #11]
      break;
 800700c:	e021      	b.n	8007052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	7c1b      	ldrb	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701e:	f107 0208 	add.w	r2, r7, #8
 8007022:	4610      	mov	r0, r2
 8007024:	4798      	blx	r3
 8007026:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	2207      	movs	r2, #7
 800702e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007030:	e00f      	b.n	8007052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa10 	bl	800745a <USBD_CtlError>
        err++;
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	3301      	adds	r3, #1
 800703e:	72fb      	strb	r3, [r7, #11]
      break;
 8007040:	e007      	b.n	8007052 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa08 	bl	800745a <USBD_CtlError>
      err++;
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	3301      	adds	r3, #1
 800704e:	72fb      	strb	r3, [r7, #11]
      break;
 8007050:	bf00      	nop
  }

  if (err != 0U)
 8007052:	7afb      	ldrb	r3, [r7, #11]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11e      	bne.n	8007096 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	88db      	ldrh	r3, [r3, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d016      	beq.n	800708e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007060:	893b      	ldrh	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00e      	beq.n	8007084 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88da      	ldrh	r2, [r3, #6]
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	4293      	cmp	r3, r2
 800706e:	bf28      	it	cs
 8007070:	4613      	movcs	r3, r2
 8007072:	b29b      	uxth	r3, r3
 8007074:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007076:	893b      	ldrh	r3, [r7, #8]
 8007078:	461a      	mov	r2, r3
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa5d 	bl	800753c <USBD_CtlSendData>
 8007082:	e009      	b.n	8007098 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f9e7 	bl	800745a <USBD_CtlError>
 800708c:	e004      	b.n	8007098 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 faae 	bl	80075f0 <USBD_CtlSendStatus>
 8007094:	e000      	b.n	8007098 <USBD_GetDescriptor+0x2cc>
    return;
 8007096:	bf00      	nop
  }
}
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	889b      	ldrh	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d131      	bne.n	8007116 <USBD_SetAddress+0x76>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	88db      	ldrh	r3, [r3, #6]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d12d      	bne.n	8007116 <USBD_SetAddress+0x76>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	885b      	ldrh	r3, [r3, #2]
 80070be:	2b7f      	cmp	r3, #127	@ 0x7f
 80070c0:	d829      	bhi.n	8007116 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	885b      	ldrh	r3, [r3, #2]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d104      	bne.n	80070e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9bc 	bl	800745a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070e2:	e01d      	b.n	8007120 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 ff35 	bl	8007f60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fa7a 	bl	80075f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2202      	movs	r2, #2
 8007106:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710a:	e009      	b.n	8007120 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007114:	e004      	b.n	8007120 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f99e 	bl	800745a <USBD_CtlError>
  }
}
 800711e:	bf00      	nop
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	b2da      	uxtb	r2, r3
 800713c:	4b4e      	ldr	r3, [pc, #312]	@ (8007278 <USBD_SetConfig+0x150>)
 800713e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007140:	4b4d      	ldr	r3, [pc, #308]	@ (8007278 <USBD_SetConfig+0x150>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d905      	bls.n	8007154 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f985 	bl	800745a <USBD_CtlError>
    return USBD_FAIL;
 8007150:	2303      	movs	r3, #3
 8007152:	e08c      	b.n	800726e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d002      	beq.n	8007166 <USBD_SetConfig+0x3e>
 8007160:	2b03      	cmp	r3, #3
 8007162:	d029      	beq.n	80071b8 <USBD_SetConfig+0x90>
 8007164:	e075      	b.n	8007252 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007166:	4b44      	ldr	r3, [pc, #272]	@ (8007278 <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d020      	beq.n	80071b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800716e:	4b42      	ldr	r3, [pc, #264]	@ (8007278 <USBD_SetConfig+0x150>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007178:	4b3f      	ldr	r3, [pc, #252]	@ (8007278 <USBD_SetConfig+0x150>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe ffe3 	bl	800614a <USBD_SetClassConfig>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f962 	bl	800745a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800719e:	e065      	b.n	800726c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fa25 	bl	80075f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2203      	movs	r2, #3
 80071aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071ae:	e05d      	b.n	800726c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa1d 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 80071b6:	e059      	b.n	800726c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071b8:	4b2f      	ldr	r3, [pc, #188]	@ (8007278 <USBD_SetConfig+0x150>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d112      	bne.n	80071e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80071c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007278 <USBD_SetConfig+0x150>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071d2:	4b29      	ldr	r3, [pc, #164]	@ (8007278 <USBD_SetConfig+0x150>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fe ffd2 	bl	8006182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa06 	bl	80075f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071e4:	e042      	b.n	800726c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80071e6:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <USBD_SetConfig+0x150>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d02a      	beq.n	800724a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fe ffc0 	bl	8006182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007202:	4b1d      	ldr	r3, [pc, #116]	@ (8007278 <USBD_SetConfig+0x150>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800720c:	4b1a      	ldr	r3, [pc, #104]	@ (8007278 <USBD_SetConfig+0x150>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fe ff99 	bl	800614a <USBD_SetClassConfig>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00f      	beq.n	8007242 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f918 	bl	800745a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fe ffa5 	bl	8006182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007240:	e014      	b.n	800726c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9d4 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 8007248:	e010      	b.n	800726c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9d0 	bl	80075f0 <USBD_CtlSendStatus>
      break;
 8007250:	e00c      	b.n	800726c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f900 	bl	800745a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800725a:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <USBD_SetConfig+0x150>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fe ff8e 	bl	8006182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
      break;
 800726a:	bf00      	nop
  }

  return ret;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200001bc 	.word	0x200001bc

0800727c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d004      	beq.n	8007298 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f8e2 	bl	800745a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007296:	e023      	b.n	80072e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	dc02      	bgt.n	80072aa <USBD_GetConfig+0x2e>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dc03      	bgt.n	80072b0 <USBD_GetConfig+0x34>
 80072a8:	e015      	b.n	80072d6 <USBD_GetConfig+0x5a>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d00b      	beq.n	80072c6 <USBD_GetConfig+0x4a>
 80072ae:	e012      	b.n	80072d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3308      	adds	r3, #8
 80072ba:	2201      	movs	r2, #1
 80072bc:	4619      	mov	r1, r3
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f93c 	bl	800753c <USBD_CtlSendData>
        break;
 80072c4:	e00c      	b.n	80072e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3304      	adds	r3, #4
 80072ca:	2201      	movs	r2, #1
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f934 	bl	800753c <USBD_CtlSendData>
        break;
 80072d4:	e004      	b.n	80072e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f8be 	bl	800745a <USBD_CtlError>
        break;
 80072de:	bf00      	nop
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d81e      	bhi.n	800733e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d004      	beq.n	8007312 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8a5 	bl	800745a <USBD_CtlError>
        break;
 8007310:	e01a      	b.n	8007348 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f043 0202 	orr.w	r2, r3, #2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	330c      	adds	r3, #12
 8007332:	2202      	movs	r2, #2
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f900 	bl	800753c <USBD_CtlSendData>
      break;
 800733c:	e004      	b.n	8007348 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f88a 	bl	800745a <USBD_CtlError>
      break;
 8007346:	bf00      	nop
  }
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	885b      	ldrh	r3, [r3, #2]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d107      	bne.n	8007372 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f940 	bl	80075f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007370:	e013      	b.n	800739a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	885b      	ldrh	r3, [r3, #2]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d10b      	bne.n	8007392 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	889b      	ldrh	r3, [r3, #4]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b29b      	uxth	r3, r3
 8007382:	b2da      	uxtb	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f930 	bl	80075f0 <USBD_CtlSendStatus>
}
 8007390:	e003      	b.n	800739a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f860 	bl	800745a <USBD_CtlError>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d80b      	bhi.n	80073d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	885b      	ldrh	r3, [r3, #2]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d10c      	bne.n	80073dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f910 	bl	80075f0 <USBD_CtlSendStatus>
      }
      break;
 80073d0:	e004      	b.n	80073dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f840 	bl	800745a <USBD_CtlError>
      break;
 80073da:	e000      	b.n	80073de <USBD_ClrFeature+0x3c>
      break;
 80073dc:	bf00      	nop
  }
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	781a      	ldrb	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff fa40 	bl	8006896 <SWAPBYTE>
 8007416:	4603      	mov	r3, r0
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff fa33 	bl	8006896 <SWAPBYTE>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff fa26 	bl	8006896 <SWAPBYTE>
 800744a:	4603      	mov	r3, r0
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	80da      	strh	r2, [r3, #6]
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007464:	2180      	movs	r1, #128	@ 0x80
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fd10 	bl	8007e8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800746c:	2100      	movs	r1, #0
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fd0c 	bl	8007e8c <USBD_LL_StallEP>
}
 8007474:	bf00      	nop
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d036      	beq.n	8007500 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007496:	6938      	ldr	r0, [r7, #16]
 8007498:	f000 f836 	bl	8007508 <USBD_GetLen>
 800749c:	4603      	mov	r3, r0
 800749e:	3301      	adds	r3, #1
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	4413      	add	r3, r2
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7812      	ldrb	r2, [r2, #0]
 80074b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	3301      	adds	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4413      	add	r3, r2
 80074c2:	2203      	movs	r2, #3
 80074c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	3301      	adds	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074cc:	e013      	b.n	80074f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	3301      	adds	r3, #1
 80074de:	613b      	str	r3, [r7, #16]
    idx++;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
 80074e2:	3301      	adds	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	4413      	add	r3, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	3301      	adds	r3, #1
 80074f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e7      	bne.n	80074ce <USBD_GetString+0x52>
 80074fe:	e000      	b.n	8007502 <USBD_GetString+0x86>
    return;
 8007500:	bf00      	nop
  }
}
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007518:	e005      	b.n	8007526 <USBD_GetLen+0x1e>
  {
    len++;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	3301      	adds	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3301      	adds	r3, #1
 8007524:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f5      	bne.n	800751a <USBD_GetLen+0x12>
  }

  return len;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2202      	movs	r2, #2
 800754c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	2100      	movs	r1, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fd1b 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	2100      	movs	r1, #0
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fd0a 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	2100      	movs	r1, #0
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fd0e 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	2100      	movs	r1, #0
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fcfd 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2204      	movs	r2, #4
 80075fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	2100      	movs	r1, #0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fcc9 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2205      	movs	r2, #5
 8007622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007626:	2300      	movs	r3, #0
 8007628:	2200      	movs	r2, #0
 800762a:	2100      	movs	r1, #0
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fcd7 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007640:	2200      	movs	r2, #0
 8007642:	4912      	ldr	r1, [pc, #72]	@ (800768c <MX_USB_DEVICE_Init+0x50>)
 8007644:	4812      	ldr	r0, [pc, #72]	@ (8007690 <MX_USB_DEVICE_Init+0x54>)
 8007646:	f7fe fd03 	bl	8006050 <USBD_Init>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007650:	f7f9 fd96 	bl	8001180 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007654:	490f      	ldr	r1, [pc, #60]	@ (8007694 <MX_USB_DEVICE_Init+0x58>)
 8007656:	480e      	ldr	r0, [pc, #56]	@ (8007690 <MX_USB_DEVICE_Init+0x54>)
 8007658:	f7fe fd2a 	bl	80060b0 <USBD_RegisterClass>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007662:	f7f9 fd8d 	bl	8001180 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007666:	490c      	ldr	r1, [pc, #48]	@ (8007698 <MX_USB_DEVICE_Init+0x5c>)
 8007668:	4809      	ldr	r0, [pc, #36]	@ (8007690 <MX_USB_DEVICE_Init+0x54>)
 800766a:	f7fe fc21 	bl	8005eb0 <USBD_CDC_RegisterInterface>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007674:	f7f9 fd84 	bl	8001180 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007678:	4805      	ldr	r0, [pc, #20]	@ (8007690 <MX_USB_DEVICE_Init+0x54>)
 800767a:	f7fe fd4f 	bl	800611c <USBD_Start>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007684:	f7f9 fd7c 	bl	8001180 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007688:	bf00      	nop
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200000ac 	.word	0x200000ac
 8007690:	200001c0 	.word	0x200001c0
 8007694:	20000018 	.word	0x20000018
 8007698:	20000098 	.word	0x20000098

0800769c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076a0:	2200      	movs	r2, #0
 80076a2:	4905      	ldr	r1, [pc, #20]	@ (80076b8 <CDC_Init_FS+0x1c>)
 80076a4:	4805      	ldr	r0, [pc, #20]	@ (80076bc <CDC_Init_FS+0x20>)
 80076a6:	f7fe fc1d 	bl	8005ee4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076aa:	4905      	ldr	r1, [pc, #20]	@ (80076c0 <CDC_Init_FS+0x24>)
 80076ac:	4803      	ldr	r0, [pc, #12]	@ (80076bc <CDC_Init_FS+0x20>)
 80076ae:	f7fe fc3b 	bl	8005f28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20000c9c 	.word	0x20000c9c
 80076bc:	200001c0 	.word	0x200001c0
 80076c0:	2000049c 	.word	0x2000049c

080076c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
 80076e0:	4613      	mov	r3, r2
 80076e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b23      	cmp	r3, #35	@ 0x23
 80076e8:	d84a      	bhi.n	8007780 <CDC_Control_FS+0xac>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <CDC_Control_FS+0x1c>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007781 	.word	0x08007781
 80076f4:	08007781 	.word	0x08007781
 80076f8:	08007781 	.word	0x08007781
 80076fc:	08007781 	.word	0x08007781
 8007700:	08007781 	.word	0x08007781
 8007704:	08007781 	.word	0x08007781
 8007708:	08007781 	.word	0x08007781
 800770c:	08007781 	.word	0x08007781
 8007710:	08007781 	.word	0x08007781
 8007714:	08007781 	.word	0x08007781
 8007718:	08007781 	.word	0x08007781
 800771c:	08007781 	.word	0x08007781
 8007720:	08007781 	.word	0x08007781
 8007724:	08007781 	.word	0x08007781
 8007728:	08007781 	.word	0x08007781
 800772c:	08007781 	.word	0x08007781
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007781 	.word	0x08007781
 800773c:	08007781 	.word	0x08007781
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007781 	.word	0x08007781
 8007750:	08007781 	.word	0x08007781
 8007754:	08007781 	.word	0x08007781
 8007758:	08007781 	.word	0x08007781
 800775c:	08007781 	.word	0x08007781
 8007760:	08007781 	.word	0x08007781
 8007764:	08007781 	.word	0x08007781
 8007768:	08007781 	.word	0x08007781
 800776c:	08007781 	.word	0x08007781
 8007770:	08007781 	.word	0x08007781
 8007774:	08007781 	.word	0x08007781
 8007778:	08007781 	.word	0x08007781
 800777c:	08007781 	.word	0x08007781
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007780:	bf00      	nop
  }

  return (USBD_OK);
 8007782:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007784:	4618      	mov	r0, r3
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b09c      	sub	sp, #112	@ 0x70
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	char ptr[100];
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	481c      	ldr	r0, [pc, #112]	@ (8007810 <CDC_Receive_FS+0x80>)
 800779e:	f7fe fbc3 	bl	8005f28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077a2:	481b      	ldr	r0, [pc, #108]	@ (8007810 <CDC_Receive_FS+0x80>)
 80077a4:	f7fe fc1e 	bl	8005fe4 <USBD_CDC_ReceivePacket>
  //strcpy(ptr,(char *)Buf);
  //memcpy(ptr,Buf,*Len);
  strncpy(ptr, (char *)Buf, *Len);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	f107 0308 	add.w	r3, r7, #8
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fd3c 	bl	8008230 <strncpy>
    ptr[*Len] = '\0';
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3370      	adds	r3, #112	@ 0x70
 80077be:	443b      	add	r3, r7
 80077c0:	2200      	movs	r2, #0
 80077c2:	f803 2c68 	strb.w	r2, [r3, #-104]
  uint32_t choice = atoi(ptr);
 80077c6:	f107 0308 	add.w	r3, r7, #8
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fc80 	bl	80080d0 <atoi>
 80077d0:	4603      	mov	r3, r0
 80077d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  if(choice == 1){
 80077d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d103      	bne.n	80077e2 <CDC_Receive_FS+0x52>
		  flag = 1;
 80077da:	4b0e      	ldr	r3, [pc, #56]	@ (8007814 <CDC_Receive_FS+0x84>)
 80077dc:	2201      	movs	r2, #1
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e010      	b.n	8007804 <CDC_Receive_FS+0x74>
	  }
	  else if(choice == 2){
 80077e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d103      	bne.n	80077f0 <CDC_Receive_FS+0x60>
		  flag = 2;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <CDC_Receive_FS+0x84>)
 80077ea:	2202      	movs	r2, #2
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e009      	b.n	8007804 <CDC_Receive_FS+0x74>
	  }
	  else if(choice == 3){
 80077f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d103      	bne.n	80077fe <CDC_Receive_FS+0x6e>
		  flag = 3;
 80077f6:	4b07      	ldr	r3, [pc, #28]	@ (8007814 <CDC_Receive_FS+0x84>)
 80077f8:	2203      	movs	r2, #3
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e002      	b.n	8007804 <CDC_Receive_FS+0x74>
	  }
	  else
		  flag = 4;
 80077fe:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <CDC_Receive_FS+0x84>)
 8007800:	2204      	movs	r2, #4
 8007802:	701a      	strb	r2, [r3, #0]


  return (USBD_OK);
 8007804:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007806:	4618      	mov	r0, r3
 8007808:	3770      	adds	r7, #112	@ 0x70
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200001c0 	.word	0x200001c0
 8007814:	2000149c 	.word	0x2000149c

08007818 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007828:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <CDC_Transmit_FS+0x48>)
 800782a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800782e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800783a:	2301      	movs	r3, #1
 800783c:	e00b      	b.n	8007856 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800783e:	887b      	ldrh	r3, [r7, #2]
 8007840:	461a      	mov	r2, r3
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4806      	ldr	r0, [pc, #24]	@ (8007860 <CDC_Transmit_FS+0x48>)
 8007846:	f7fe fb4d 	bl	8005ee4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800784a:	4805      	ldr	r0, [pc, #20]	@ (8007860 <CDC_Transmit_FS+0x48>)
 800784c:	f7fe fb8a 	bl	8005f64 <USBD_CDC_TransmitPacket>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007854:	7bfb      	ldrb	r3, [r7, #15]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200001c0 	.word	0x200001c0

08007864 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	6039      	str	r1, [r7, #0]
 8007892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2212      	movs	r2, #18
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800789a:	4b03      	ldr	r3, [pc, #12]	@ (80078a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	200000c8 	.word	0x200000c8

080078ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2204      	movs	r2, #4
 80078bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078be:	4b03      	ldr	r3, [pc, #12]	@ (80078cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200000dc 	.word	0x200000dc

080078d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4907      	ldr	r1, [pc, #28]	@ (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
 80078e6:	4808      	ldr	r0, [pc, #32]	@ (8007908 <USBD_FS_ProductStrDescriptor+0x38>)
 80078e8:	f7ff fdc8 	bl	800747c <USBD_GetString>
 80078ec:	e004      	b.n	80078f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4904      	ldr	r1, [pc, #16]	@ (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
 80078f2:	4805      	ldr	r0, [pc, #20]	@ (8007908 <USBD_FS_ProductStrDescriptor+0x38>)
 80078f4:	f7ff fdc2 	bl	800747c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f8:	4b02      	ldr	r3, [pc, #8]	@ (8007904 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200014a0 	.word	0x200014a0
 8007908:	08008b80 	.word	0x08008b80

0800790c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	4904      	ldr	r1, [pc, #16]	@ (800792c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800791c:	4804      	ldr	r0, [pc, #16]	@ (8007930 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800791e:	f7ff fdad 	bl	800747c <USBD_GetString>
  return USBD_StrDesc;
 8007922:	4b02      	ldr	r3, [pc, #8]	@ (800792c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200014a0 	.word	0x200014a0
 8007930:	08008b98 	.word	0x08008b98

08007934 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	221a      	movs	r2, #26
 8007944:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007946:	f000 f843 	bl	80079d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800794a:	4b02      	ldr	r3, [pc, #8]	@ (8007954 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200000e0 	.word	0x200000e0

08007958 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4907      	ldr	r1, [pc, #28]	@ (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
 800796e:	4808      	ldr	r0, [pc, #32]	@ (8007990 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007970:	f7ff fd84 	bl	800747c <USBD_GetString>
 8007974:	e004      	b.n	8007980 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4904      	ldr	r1, [pc, #16]	@ (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
 800797a:	4805      	ldr	r0, [pc, #20]	@ (8007990 <USBD_FS_ConfigStrDescriptor+0x38>)
 800797c:	f7ff fd7e 	bl	800747c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	200014a0 	.word	0x200014a0
 8007990:	08008bac 	.word	0x08008bac

08007994 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d105      	bne.n	80079b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4907      	ldr	r1, [pc, #28]	@ (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079aa:	4808      	ldr	r0, [pc, #32]	@ (80079cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079ac:	f7ff fd66 	bl	800747c <USBD_GetString>
 80079b0:	e004      	b.n	80079bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4904      	ldr	r1, [pc, #16]	@ (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079b6:	4805      	ldr	r0, [pc, #20]	@ (80079cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079b8:	f7ff fd60 	bl	800747c <USBD_GetString>
  }
  return USBD_StrDesc;
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200014a0 	.word	0x200014a0
 80079cc:	08008bb8 	.word	0x08008bb8

080079d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <Get_SerialNum+0x44>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <Get_SerialNum+0x48>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079e2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a1c <Get_SerialNum+0x4c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079f6:	2208      	movs	r2, #8
 80079f8:	4909      	ldr	r1, [pc, #36]	@ (8007a20 <Get_SerialNum+0x50>)
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 f814 	bl	8007a28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a00:	2204      	movs	r2, #4
 8007a02:	4908      	ldr	r1, [pc, #32]	@ (8007a24 <Get_SerialNum+0x54>)
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f000 f80f 	bl	8007a28 <IntToUnicode>
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	1fff7a10 	.word	0x1fff7a10
 8007a18:	1fff7a14 	.word	0x1fff7a14
 8007a1c:	1fff7a18 	.word	0x1fff7a18
 8007a20:	200000e2 	.word	0x200000e2
 8007a24:	200000f2 	.word	0x200000f2

08007a28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	4613      	mov	r3, r2
 8007a34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
 8007a3e:	e027      	b.n	8007a90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0f1b      	lsrs	r3, r3, #28
 8007a44:	2b09      	cmp	r3, #9
 8007a46:	d80b      	bhi.n	8007a60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	440b      	add	r3, r1
 8007a58:	3230      	adds	r2, #48	@ 0x30
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e00a      	b.n	8007a76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	440b      	add	r3, r1
 8007a70:	3237      	adds	r2, #55	@ 0x37
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	3301      	adds	r3, #1
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
 8007a90:	7dfa      	ldrb	r2, [r7, #23]
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d3d3      	bcc.n	8007a40 <IntToUnicode+0x18>
  }
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	@ 0x28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab0:	f107 0314 	add.w	r3, r7, #20
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	605a      	str	r2, [r3, #4]
 8007aba:	609a      	str	r2, [r3, #8]
 8007abc:	60da      	str	r2, [r3, #12]
 8007abe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ac8:	d13a      	bne.n	8007b40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	4b1e      	ldr	r3, [pc, #120]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007ada:	4b1b      	ldr	r3, [pc, #108]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	613b      	str	r3, [r7, #16]
 8007ae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ae6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aec:	2302      	movs	r3, #2
 8007aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007af4:	2303      	movs	r3, #3
 8007af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007af8:	230a      	movs	r3, #10
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007afc:	f107 0314 	add.w	r3, r7, #20
 8007b00:	4619      	mov	r1, r3
 8007b02:	4812      	ldr	r0, [pc, #72]	@ (8007b4c <HAL_PCD_MspInit+0xa4>)
 8007b04:	f7fa fa02 	bl	8001f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b08:	4b0f      	ldr	r3, [pc, #60]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b12:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	4b0b      	ldr	r3, [pc, #44]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b22:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b24:	4b08      	ldr	r3, [pc, #32]	@ (8007b48 <HAL_PCD_MspInit+0xa0>)
 8007b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b30:	2200      	movs	r2, #0
 8007b32:	2100      	movs	r1, #0
 8007b34:	2043      	movs	r0, #67	@ 0x43
 8007b36:	f7fa f9b2 	bl	8001e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b3a:	2043      	movs	r0, #67	@ 0x43
 8007b3c:	f7fa f9cb 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b40:	bf00      	nop
 8007b42:	3728      	adds	r7, #40	@ 0x28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	40020000 	.word	0x40020000

08007b50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7fe fb25 	bl	80061b6 <USBD_LL_SetupStage>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f7fe fb5f 	bl	8006260 <USBD_LL_DataOutStage>
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3320      	adds	r3, #32
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	f7fe fbf8 	bl	80063c6 <USBD_LL_DataInStage>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe fd32 	bl	8006656 <USBD_LL_SOF>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	79db      	ldrb	r3, [r3, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
 8007c12:	e008      	b.n	8007c26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	79db      	ldrb	r3, [r3, #7]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d102      	bne.n	8007c22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
 8007c20:	e001      	b.n	8007c26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007c22:	f7f9 faad 	bl	8001180 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe fccc 	bl	80065ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fc74 	bl	800652a <USBD_LL_Reset>
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fcc7 	bl	80065ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7adb      	ldrb	r3, [r3, #11]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c80:	4b04      	ldr	r3, [pc, #16]	@ (8007c94 <HAL_PCD_SuspendCallback+0x48>)
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	4a03      	ldr	r2, [pc, #12]	@ (8007c94 <HAL_PCD_SuspendCallback+0x48>)
 8007c86:	f043 0306 	orr.w	r3, r3, #6
 8007c8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	e000ed00 	.word	0xe000ed00

08007c98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fcbd 	bl	8006626 <USBD_LL_Resume>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fd15 	bl	80066fa <USBD_LL_IsoOUTIncomplete>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fcd1 	bl	8006696 <USBD_LL_IsoINIncomplete>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fd27 	bl	800675e <USBD_LL_DevConnected>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fd24 	bl	8006774 <USBD_LL_DevDisconnected>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d13c      	bne.n	8007dbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d44:	4a20      	ldr	r2, [pc, #128]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d54:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d5e:	2204      	movs	r2, #4
 8007d60:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d64:	2202      	movs	r2, #2
 8007d66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d68:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d6e:	4b16      	ldr	r3, [pc, #88]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d74:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d80:	4b11      	ldr	r3, [pc, #68]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d86:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d92:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d94:	f7fa fa89 	bl	80022aa <HAL_PCD_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d9e:	f7f9 f9ef 	bl	8001180 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007da2:	2180      	movs	r1, #128	@ 0x80
 8007da4:	4808      	ldr	r0, [pc, #32]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007da6:	f7fb fcb4 	bl	8003712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	2100      	movs	r1, #0
 8007dae:	4806      	ldr	r0, [pc, #24]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007db0:	f7fb fc68 	bl	8003684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007db4:	2280      	movs	r2, #128	@ 0x80
 8007db6:	2101      	movs	r1, #1
 8007db8:	4803      	ldr	r0, [pc, #12]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007dba:	f7fb fc63 	bl	8003684 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	200016a0 	.word	0x200016a0

08007dcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fa fb70 	bl	80024c8 <HAL_PCD_Start>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f942 	bl	8008078 <USBD_Get_USB_Status>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	70fb      	strb	r3, [r7, #3]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70bb      	strb	r3, [r7, #2]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e2a:	78bb      	ldrb	r3, [r7, #2]
 8007e2c:	883a      	ldrh	r2, [r7, #0]
 8007e2e:	78f9      	ldrb	r1, [r7, #3]
 8007e30:	f7fb f844 	bl	8002ebc <HAL_PCD_EP_Open>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f91c 	bl	8008078 <USBD_Get_USB_Status>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fb f88d 	bl	8002f8c <HAL_PCD_EP_Close>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f8fd 	bl	8008078 <USBD_Get_USB_Status>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fb f945 	bl	800313a <HAL_PCD_EP_SetStall>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f8de 	bl	8008078 <USBD_Get_USB_Status>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ee4:	78fa      	ldrb	r2, [r7, #3]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fb f989 	bl	8003200 <HAL_PCD_EP_ClrStall>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f8bf 	bl	8008078 <USBD_Get_USB_Status>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da0b      	bge.n	8007f3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	3316      	adds	r3, #22
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	e00b      	b.n	8007f54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f7a:	78fa      	ldrb	r2, [r7, #3]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fa ff78 	bl	8002e74 <HAL_PCD_SetAddress>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f874 	bl	8008078 <USBD_Get_USB_Status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	460b      	mov	r3, r1
 8007fac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fbc:	7af9      	ldrb	r1, [r7, #11]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f7fb f880 	bl	80030c6 <HAL_PCD_EP_Transmit>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f853 	bl	8008078 <USBD_Get_USB_Status>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	460b      	mov	r3, r1
 8007fee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ffe:	7af9      	ldrb	r1, [r7, #11]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	f7fb f80c 	bl	8003020 <HAL_PCD_EP_Receive>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f832 	bl	8008078 <USBD_Get_USB_Status>
 8008014:	4603      	mov	r3, r0
 8008016:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008018:	7dbb      	ldrb	r3, [r7, #22]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fb f82c 	bl	8003096 <HAL_PCD_EP_GetRxCount>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008050:	4b03      	ldr	r3, [pc, #12]	@ (8008060 <USBD_static_malloc+0x18>)
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20001b84 	.word	0x20001b84

08008064 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d817      	bhi.n	80080bc <USBD_Get_USB_Status+0x44>
 800808c:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <USBD_Get_USB_Status+0x1c>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ab 	.word	0x080080ab
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b7 	.word	0x080080b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e00b      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	e008      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
    break;
 80080b4:	e005      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ba:	e002      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	bf00      	nop
  }
  return usb_status;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <atoi>:
 80080d0:	220a      	movs	r2, #10
 80080d2:	2100      	movs	r1, #0
 80080d4:	f000 b87a 	b.w	80081cc <strtol>

080080d8 <_strtol_l.constprop.0>:
 80080d8:	2b24      	cmp	r3, #36	@ 0x24
 80080da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080de:	4686      	mov	lr, r0
 80080e0:	4690      	mov	r8, r2
 80080e2:	d801      	bhi.n	80080e8 <_strtol_l.constprop.0+0x10>
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d106      	bne.n	80080f6 <_strtol_l.constprop.0+0x1e>
 80080e8:	f000 f8b6 	bl	8008258 <__errno>
 80080ec:	2316      	movs	r3, #22
 80080ee:	6003      	str	r3, [r0, #0]
 80080f0:	2000      	movs	r0, #0
 80080f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080f6:	4834      	ldr	r0, [pc, #208]	@ (80081c8 <_strtol_l.constprop.0+0xf0>)
 80080f8:	460d      	mov	r5, r1
 80080fa:	462a      	mov	r2, r5
 80080fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008100:	5d06      	ldrb	r6, [r0, r4]
 8008102:	f016 0608 	ands.w	r6, r6, #8
 8008106:	d1f8      	bne.n	80080fa <_strtol_l.constprop.0+0x22>
 8008108:	2c2d      	cmp	r4, #45	@ 0x2d
 800810a:	d12d      	bne.n	8008168 <_strtol_l.constprop.0+0x90>
 800810c:	782c      	ldrb	r4, [r5, #0]
 800810e:	2601      	movs	r6, #1
 8008110:	1c95      	adds	r5, r2, #2
 8008112:	f033 0210 	bics.w	r2, r3, #16
 8008116:	d109      	bne.n	800812c <_strtol_l.constprop.0+0x54>
 8008118:	2c30      	cmp	r4, #48	@ 0x30
 800811a:	d12a      	bne.n	8008172 <_strtol_l.constprop.0+0x9a>
 800811c:	782a      	ldrb	r2, [r5, #0]
 800811e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008122:	2a58      	cmp	r2, #88	@ 0x58
 8008124:	d125      	bne.n	8008172 <_strtol_l.constprop.0+0x9a>
 8008126:	786c      	ldrb	r4, [r5, #1]
 8008128:	2310      	movs	r3, #16
 800812a:	3502      	adds	r5, #2
 800812c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008130:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008134:	2200      	movs	r2, #0
 8008136:	fbbc f9f3 	udiv	r9, ip, r3
 800813a:	4610      	mov	r0, r2
 800813c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008140:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008144:	2f09      	cmp	r7, #9
 8008146:	d81b      	bhi.n	8008180 <_strtol_l.constprop.0+0xa8>
 8008148:	463c      	mov	r4, r7
 800814a:	42a3      	cmp	r3, r4
 800814c:	dd27      	ble.n	800819e <_strtol_l.constprop.0+0xc6>
 800814e:	1c57      	adds	r7, r2, #1
 8008150:	d007      	beq.n	8008162 <_strtol_l.constprop.0+0x8a>
 8008152:	4581      	cmp	r9, r0
 8008154:	d320      	bcc.n	8008198 <_strtol_l.constprop.0+0xc0>
 8008156:	d101      	bne.n	800815c <_strtol_l.constprop.0+0x84>
 8008158:	45a2      	cmp	sl, r4
 800815a:	db1d      	blt.n	8008198 <_strtol_l.constprop.0+0xc0>
 800815c:	fb00 4003 	mla	r0, r0, r3, r4
 8008160:	2201      	movs	r2, #1
 8008162:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008166:	e7eb      	b.n	8008140 <_strtol_l.constprop.0+0x68>
 8008168:	2c2b      	cmp	r4, #43	@ 0x2b
 800816a:	bf04      	itt	eq
 800816c:	782c      	ldrbeq	r4, [r5, #0]
 800816e:	1c95      	addeq	r5, r2, #2
 8008170:	e7cf      	b.n	8008112 <_strtol_l.constprop.0+0x3a>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1da      	bne.n	800812c <_strtol_l.constprop.0+0x54>
 8008176:	2c30      	cmp	r4, #48	@ 0x30
 8008178:	bf0c      	ite	eq
 800817a:	2308      	moveq	r3, #8
 800817c:	230a      	movne	r3, #10
 800817e:	e7d5      	b.n	800812c <_strtol_l.constprop.0+0x54>
 8008180:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008184:	2f19      	cmp	r7, #25
 8008186:	d801      	bhi.n	800818c <_strtol_l.constprop.0+0xb4>
 8008188:	3c37      	subs	r4, #55	@ 0x37
 800818a:	e7de      	b.n	800814a <_strtol_l.constprop.0+0x72>
 800818c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008190:	2f19      	cmp	r7, #25
 8008192:	d804      	bhi.n	800819e <_strtol_l.constprop.0+0xc6>
 8008194:	3c57      	subs	r4, #87	@ 0x57
 8008196:	e7d8      	b.n	800814a <_strtol_l.constprop.0+0x72>
 8008198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800819c:	e7e1      	b.n	8008162 <_strtol_l.constprop.0+0x8a>
 800819e:	1c53      	adds	r3, r2, #1
 80081a0:	d108      	bne.n	80081b4 <_strtol_l.constprop.0+0xdc>
 80081a2:	2322      	movs	r3, #34	@ 0x22
 80081a4:	f8ce 3000 	str.w	r3, [lr]
 80081a8:	4660      	mov	r0, ip
 80081aa:	f1b8 0f00 	cmp.w	r8, #0
 80081ae:	d0a0      	beq.n	80080f2 <_strtol_l.constprop.0+0x1a>
 80081b0:	1e69      	subs	r1, r5, #1
 80081b2:	e006      	b.n	80081c2 <_strtol_l.constprop.0+0xea>
 80081b4:	b106      	cbz	r6, 80081b8 <_strtol_l.constprop.0+0xe0>
 80081b6:	4240      	negs	r0, r0
 80081b8:	f1b8 0f00 	cmp.w	r8, #0
 80081bc:	d099      	beq.n	80080f2 <_strtol_l.constprop.0+0x1a>
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d1f6      	bne.n	80081b0 <_strtol_l.constprop.0+0xd8>
 80081c2:	f8c8 1000 	str.w	r1, [r8]
 80081c6:	e794      	b.n	80080f2 <_strtol_l.constprop.0+0x1a>
 80081c8:	08008bd9 	.word	0x08008bd9

080081cc <strtol>:
 80081cc:	4613      	mov	r3, r2
 80081ce:	460a      	mov	r2, r1
 80081d0:	4601      	mov	r1, r0
 80081d2:	4802      	ldr	r0, [pc, #8]	@ (80081dc <strtol+0x10>)
 80081d4:	6800      	ldr	r0, [r0, #0]
 80081d6:	f7ff bf7f 	b.w	80080d8 <_strtol_l.constprop.0>
 80081da:	bf00      	nop
 80081dc:	200000fc 	.word	0x200000fc

080081e0 <siprintf>:
 80081e0:	b40e      	push	{r1, r2, r3}
 80081e2:	b500      	push	{lr}
 80081e4:	b09c      	sub	sp, #112	@ 0x70
 80081e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80081e8:	9002      	str	r0, [sp, #8]
 80081ea:	9006      	str	r0, [sp, #24]
 80081ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081f0:	4809      	ldr	r0, [pc, #36]	@ (8008218 <siprintf+0x38>)
 80081f2:	9107      	str	r1, [sp, #28]
 80081f4:	9104      	str	r1, [sp, #16]
 80081f6:	4909      	ldr	r1, [pc, #36]	@ (800821c <siprintf+0x3c>)
 80081f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fc:	9105      	str	r1, [sp, #20]
 80081fe:	6800      	ldr	r0, [r0, #0]
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	a902      	add	r1, sp, #8
 8008204:	f000 f9a8 	bl	8008558 <_svfiprintf_r>
 8008208:	9b02      	ldr	r3, [sp, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
 800820e:	b01c      	add	sp, #112	@ 0x70
 8008210:	f85d eb04 	ldr.w	lr, [sp], #4
 8008214:	b003      	add	sp, #12
 8008216:	4770      	bx	lr
 8008218:	200000fc 	.word	0x200000fc
 800821c:	ffff0208 	.word	0xffff0208

08008220 <memset>:
 8008220:	4402      	add	r2, r0
 8008222:	4603      	mov	r3, r0
 8008224:	4293      	cmp	r3, r2
 8008226:	d100      	bne.n	800822a <memset+0xa>
 8008228:	4770      	bx	lr
 800822a:	f803 1b01 	strb.w	r1, [r3], #1
 800822e:	e7f9      	b.n	8008224 <memset+0x4>

08008230 <strncpy>:
 8008230:	b510      	push	{r4, lr}
 8008232:	3901      	subs	r1, #1
 8008234:	4603      	mov	r3, r0
 8008236:	b132      	cbz	r2, 8008246 <strncpy+0x16>
 8008238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800823c:	f803 4b01 	strb.w	r4, [r3], #1
 8008240:	3a01      	subs	r2, #1
 8008242:	2c00      	cmp	r4, #0
 8008244:	d1f7      	bne.n	8008236 <strncpy+0x6>
 8008246:	441a      	add	r2, r3
 8008248:	2100      	movs	r1, #0
 800824a:	4293      	cmp	r3, r2
 800824c:	d100      	bne.n	8008250 <strncpy+0x20>
 800824e:	bd10      	pop	{r4, pc}
 8008250:	f803 1b01 	strb.w	r1, [r3], #1
 8008254:	e7f9      	b.n	800824a <strncpy+0x1a>
	...

08008258 <__errno>:
 8008258:	4b01      	ldr	r3, [pc, #4]	@ (8008260 <__errno+0x8>)
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200000fc 	.word	0x200000fc

08008264 <__libc_init_array>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4d0d      	ldr	r5, [pc, #52]	@ (800829c <__libc_init_array+0x38>)
 8008268:	4c0d      	ldr	r4, [pc, #52]	@ (80082a0 <__libc_init_array+0x3c>)
 800826a:	1b64      	subs	r4, r4, r5
 800826c:	10a4      	asrs	r4, r4, #2
 800826e:	2600      	movs	r6, #0
 8008270:	42a6      	cmp	r6, r4
 8008272:	d109      	bne.n	8008288 <__libc_init_array+0x24>
 8008274:	4d0b      	ldr	r5, [pc, #44]	@ (80082a4 <__libc_init_array+0x40>)
 8008276:	4c0c      	ldr	r4, [pc, #48]	@ (80082a8 <__libc_init_array+0x44>)
 8008278:	f000 fc66 	bl	8008b48 <_init>
 800827c:	1b64      	subs	r4, r4, r5
 800827e:	10a4      	asrs	r4, r4, #2
 8008280:	2600      	movs	r6, #0
 8008282:	42a6      	cmp	r6, r4
 8008284:	d105      	bne.n	8008292 <__libc_init_array+0x2e>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	f855 3b04 	ldr.w	r3, [r5], #4
 800828c:	4798      	blx	r3
 800828e:	3601      	adds	r6, #1
 8008290:	e7ee      	b.n	8008270 <__libc_init_array+0xc>
 8008292:	f855 3b04 	ldr.w	r3, [r5], #4
 8008296:	4798      	blx	r3
 8008298:	3601      	adds	r6, #1
 800829a:	e7f2      	b.n	8008282 <__libc_init_array+0x1e>
 800829c:	08008d14 	.word	0x08008d14
 80082a0:	08008d14 	.word	0x08008d14
 80082a4:	08008d14 	.word	0x08008d14
 80082a8:	08008d18 	.word	0x08008d18

080082ac <__retarget_lock_acquire_recursive>:
 80082ac:	4770      	bx	lr

080082ae <__retarget_lock_release_recursive>:
 80082ae:	4770      	bx	lr

080082b0 <_free_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d041      	beq.n	800833c <_free_r+0x8c>
 80082b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082bc:	1f0c      	subs	r4, r1, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb8      	it	lt
 80082c2:	18e4      	addlt	r4, r4, r3
 80082c4:	f000 f8e0 	bl	8008488 <__malloc_lock>
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <_free_r+0x90>)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x2c>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d8:	f000 b8dc 	b.w	8008494 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x42>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x1e>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x4c>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x42>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1850      	adds	r0, r2, r1
 8008300:	42a0      	cmp	r0, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x6c>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	4401      	add	r1, r0
 8008308:	1850      	adds	r0, r2, r1
 800830a:	4283      	cmp	r3, r0
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x22>
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	4408      	add	r0, r1
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x22>
 800831c:	d902      	bls.n	8008324 <_free_r+0x74>
 800831e:	230c      	movs	r3, #12
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x22>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf04      	itt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	bf04      	itt	eq
 8008334:	1809      	addeq	r1, r1, r0
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	6054      	str	r4, [r2, #4]
 800833a:	e7ca      	b.n	80082d2 <_free_r+0x22>
 800833c:	bd38      	pop	{r3, r4, r5, pc}
 800833e:	bf00      	nop
 8008340:	20001ee8 	.word	0x20001ee8

08008344 <sbrk_aligned>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4e0f      	ldr	r6, [pc, #60]	@ (8008384 <sbrk_aligned+0x40>)
 8008348:	460c      	mov	r4, r1
 800834a:	6831      	ldr	r1, [r6, #0]
 800834c:	4605      	mov	r5, r0
 800834e:	b911      	cbnz	r1, 8008356 <sbrk_aligned+0x12>
 8008350:	f000 fba6 	bl	8008aa0 <_sbrk_r>
 8008354:	6030      	str	r0, [r6, #0]
 8008356:	4621      	mov	r1, r4
 8008358:	4628      	mov	r0, r5
 800835a:	f000 fba1 	bl	8008aa0 <_sbrk_r>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d103      	bne.n	800836a <sbrk_aligned+0x26>
 8008362:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008366:	4620      	mov	r0, r4
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	1cc4      	adds	r4, r0, #3
 800836c:	f024 0403 	bic.w	r4, r4, #3
 8008370:	42a0      	cmp	r0, r4
 8008372:	d0f8      	beq.n	8008366 <sbrk_aligned+0x22>
 8008374:	1a21      	subs	r1, r4, r0
 8008376:	4628      	mov	r0, r5
 8008378:	f000 fb92 	bl	8008aa0 <_sbrk_r>
 800837c:	3001      	adds	r0, #1
 800837e:	d1f2      	bne.n	8008366 <sbrk_aligned+0x22>
 8008380:	e7ef      	b.n	8008362 <sbrk_aligned+0x1e>
 8008382:	bf00      	nop
 8008384:	20001ee4 	.word	0x20001ee4

08008388 <_malloc_r>:
 8008388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838c:	1ccd      	adds	r5, r1, #3
 800838e:	f025 0503 	bic.w	r5, r5, #3
 8008392:	3508      	adds	r5, #8
 8008394:	2d0c      	cmp	r5, #12
 8008396:	bf38      	it	cc
 8008398:	250c      	movcc	r5, #12
 800839a:	2d00      	cmp	r5, #0
 800839c:	4606      	mov	r6, r0
 800839e:	db01      	blt.n	80083a4 <_malloc_r+0x1c>
 80083a0:	42a9      	cmp	r1, r5
 80083a2:	d904      	bls.n	80083ae <_malloc_r+0x26>
 80083a4:	230c      	movs	r3, #12
 80083a6:	6033      	str	r3, [r6, #0]
 80083a8:	2000      	movs	r0, #0
 80083aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008484 <_malloc_r+0xfc>
 80083b2:	f000 f869 	bl	8008488 <__malloc_lock>
 80083b6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ba:	461c      	mov	r4, r3
 80083bc:	bb44      	cbnz	r4, 8008410 <_malloc_r+0x88>
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffbf 	bl	8008344 <sbrk_aligned>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	4604      	mov	r4, r0
 80083ca:	d158      	bne.n	800847e <_malloc_r+0xf6>
 80083cc:	f8d8 4000 	ldr.w	r4, [r8]
 80083d0:	4627      	mov	r7, r4
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	d143      	bne.n	800845e <_malloc_r+0xd6>
 80083d6:	2c00      	cmp	r4, #0
 80083d8:	d04b      	beq.n	8008472 <_malloc_r+0xea>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	4639      	mov	r1, r7
 80083de:	4630      	mov	r0, r6
 80083e0:	eb04 0903 	add.w	r9, r4, r3
 80083e4:	f000 fb5c 	bl	8008aa0 <_sbrk_r>
 80083e8:	4581      	cmp	r9, r0
 80083ea:	d142      	bne.n	8008472 <_malloc_r+0xea>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	1a6d      	subs	r5, r5, r1
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffa6 	bl	8008344 <sbrk_aligned>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d03a      	beq.n	8008472 <_malloc_r+0xea>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	442b      	add	r3, r5
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	f8d8 3000 	ldr.w	r3, [r8]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	bb62      	cbnz	r2, 8008464 <_malloc_r+0xdc>
 800840a:	f8c8 7000 	str.w	r7, [r8]
 800840e:	e00f      	b.n	8008430 <_malloc_r+0xa8>
 8008410:	6822      	ldr	r2, [r4, #0]
 8008412:	1b52      	subs	r2, r2, r5
 8008414:	d420      	bmi.n	8008458 <_malloc_r+0xd0>
 8008416:	2a0b      	cmp	r2, #11
 8008418:	d917      	bls.n	800844a <_malloc_r+0xc2>
 800841a:	1961      	adds	r1, r4, r5
 800841c:	42a3      	cmp	r3, r4
 800841e:	6025      	str	r5, [r4, #0]
 8008420:	bf18      	it	ne
 8008422:	6059      	strne	r1, [r3, #4]
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	bf08      	it	eq
 8008428:	f8c8 1000 	streq.w	r1, [r8]
 800842c:	5162      	str	r2, [r4, r5]
 800842e:	604b      	str	r3, [r1, #4]
 8008430:	4630      	mov	r0, r6
 8008432:	f000 f82f 	bl	8008494 <__malloc_unlock>
 8008436:	f104 000b 	add.w	r0, r4, #11
 800843a:	1d23      	adds	r3, r4, #4
 800843c:	f020 0007 	bic.w	r0, r0, #7
 8008440:	1ac2      	subs	r2, r0, r3
 8008442:	bf1c      	itt	ne
 8008444:	1a1b      	subne	r3, r3, r0
 8008446:	50a3      	strne	r3, [r4, r2]
 8008448:	e7af      	b.n	80083aa <_malloc_r+0x22>
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	42a3      	cmp	r3, r4
 800844e:	bf0c      	ite	eq
 8008450:	f8c8 2000 	streq.w	r2, [r8]
 8008454:	605a      	strne	r2, [r3, #4]
 8008456:	e7eb      	b.n	8008430 <_malloc_r+0xa8>
 8008458:	4623      	mov	r3, r4
 800845a:	6864      	ldr	r4, [r4, #4]
 800845c:	e7ae      	b.n	80083bc <_malloc_r+0x34>
 800845e:	463c      	mov	r4, r7
 8008460:	687f      	ldr	r7, [r7, #4]
 8008462:	e7b6      	b.n	80083d2 <_malloc_r+0x4a>
 8008464:	461a      	mov	r2, r3
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	42a3      	cmp	r3, r4
 800846a:	d1fb      	bne.n	8008464 <_malloc_r+0xdc>
 800846c:	2300      	movs	r3, #0
 800846e:	6053      	str	r3, [r2, #4]
 8008470:	e7de      	b.n	8008430 <_malloc_r+0xa8>
 8008472:	230c      	movs	r3, #12
 8008474:	6033      	str	r3, [r6, #0]
 8008476:	4630      	mov	r0, r6
 8008478:	f000 f80c 	bl	8008494 <__malloc_unlock>
 800847c:	e794      	b.n	80083a8 <_malloc_r+0x20>
 800847e:	6005      	str	r5, [r0, #0]
 8008480:	e7d6      	b.n	8008430 <_malloc_r+0xa8>
 8008482:	bf00      	nop
 8008484:	20001ee8 	.word	0x20001ee8

08008488 <__malloc_lock>:
 8008488:	4801      	ldr	r0, [pc, #4]	@ (8008490 <__malloc_lock+0x8>)
 800848a:	f7ff bf0f 	b.w	80082ac <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	20001ee0 	.word	0x20001ee0

08008494 <__malloc_unlock>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__malloc_unlock+0x8>)
 8008496:	f7ff bf0a 	b.w	80082ae <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	20001ee0 	.word	0x20001ee0

080084a0 <__ssputs_r>:
 80084a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	688e      	ldr	r6, [r1, #8]
 80084a6:	461f      	mov	r7, r3
 80084a8:	42be      	cmp	r6, r7
 80084aa:	680b      	ldr	r3, [r1, #0]
 80084ac:	4682      	mov	sl, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	4690      	mov	r8, r2
 80084b2:	d82d      	bhi.n	8008510 <__ssputs_r+0x70>
 80084b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084bc:	d026      	beq.n	800850c <__ssputs_r+0x6c>
 80084be:	6965      	ldr	r5, [r4, #20]
 80084c0:	6909      	ldr	r1, [r1, #16]
 80084c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c6:	eba3 0901 	sub.w	r9, r3, r1
 80084ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ce:	1c7b      	adds	r3, r7, #1
 80084d0:	444b      	add	r3, r9
 80084d2:	106d      	asrs	r5, r5, #1
 80084d4:	429d      	cmp	r5, r3
 80084d6:	bf38      	it	cc
 80084d8:	461d      	movcc	r5, r3
 80084da:	0553      	lsls	r3, r2, #21
 80084dc:	d527      	bpl.n	800852e <__ssputs_r+0x8e>
 80084de:	4629      	mov	r1, r5
 80084e0:	f7ff ff52 	bl	8008388 <_malloc_r>
 80084e4:	4606      	mov	r6, r0
 80084e6:	b360      	cbz	r0, 8008542 <__ssputs_r+0xa2>
 80084e8:	6921      	ldr	r1, [r4, #16]
 80084ea:	464a      	mov	r2, r9
 80084ec:	f000 fae8 	bl	8008ac0 <memcpy>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	6126      	str	r6, [r4, #16]
 80084fe:	6165      	str	r5, [r4, #20]
 8008500:	444e      	add	r6, r9
 8008502:	eba5 0509 	sub.w	r5, r5, r9
 8008506:	6026      	str	r6, [r4, #0]
 8008508:	60a5      	str	r5, [r4, #8]
 800850a:	463e      	mov	r6, r7
 800850c:	42be      	cmp	r6, r7
 800850e:	d900      	bls.n	8008512 <__ssputs_r+0x72>
 8008510:	463e      	mov	r6, r7
 8008512:	6820      	ldr	r0, [r4, #0]
 8008514:	4632      	mov	r2, r6
 8008516:	4641      	mov	r1, r8
 8008518:	f000 faa8 	bl	8008a6c <memmove>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	1b9b      	subs	r3, r3, r6
 8008520:	60a3      	str	r3, [r4, #8]
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	4433      	add	r3, r6
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	2000      	movs	r0, #0
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	462a      	mov	r2, r5
 8008530:	f000 fad4 	bl	8008adc <_realloc_r>
 8008534:	4606      	mov	r6, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d1e0      	bne.n	80084fc <__ssputs_r+0x5c>
 800853a:	6921      	ldr	r1, [r4, #16]
 800853c:	4650      	mov	r0, sl
 800853e:	f7ff feb7 	bl	80082b0 <_free_r>
 8008542:	230c      	movs	r3, #12
 8008544:	f8ca 3000 	str.w	r3, [sl]
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008554:	e7e9      	b.n	800852a <__ssputs_r+0x8a>
	...

08008558 <_svfiprintf_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	4698      	mov	r8, r3
 800855e:	898b      	ldrh	r3, [r1, #12]
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	b09d      	sub	sp, #116	@ 0x74
 8008564:	4607      	mov	r7, r0
 8008566:	460d      	mov	r5, r1
 8008568:	4614      	mov	r4, r2
 800856a:	d510      	bpl.n	800858e <_svfiprintf_r+0x36>
 800856c:	690b      	ldr	r3, [r1, #16]
 800856e:	b973      	cbnz	r3, 800858e <_svfiprintf_r+0x36>
 8008570:	2140      	movs	r1, #64	@ 0x40
 8008572:	f7ff ff09 	bl	8008388 <_malloc_r>
 8008576:	6028      	str	r0, [r5, #0]
 8008578:	6128      	str	r0, [r5, #16]
 800857a:	b930      	cbnz	r0, 800858a <_svfiprintf_r+0x32>
 800857c:	230c      	movs	r3, #12
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008584:	b01d      	add	sp, #116	@ 0x74
 8008586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858a:	2340      	movs	r3, #64	@ 0x40
 800858c:	616b      	str	r3, [r5, #20]
 800858e:	2300      	movs	r3, #0
 8008590:	9309      	str	r3, [sp, #36]	@ 0x24
 8008592:	2320      	movs	r3, #32
 8008594:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008598:	f8cd 800c 	str.w	r8, [sp, #12]
 800859c:	2330      	movs	r3, #48	@ 0x30
 800859e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800873c <_svfiprintf_r+0x1e4>
 80085a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085a6:	f04f 0901 	mov.w	r9, #1
 80085aa:	4623      	mov	r3, r4
 80085ac:	469a      	mov	sl, r3
 80085ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085b2:	b10a      	cbz	r2, 80085b8 <_svfiprintf_r+0x60>
 80085b4:	2a25      	cmp	r2, #37	@ 0x25
 80085b6:	d1f9      	bne.n	80085ac <_svfiprintf_r+0x54>
 80085b8:	ebba 0b04 	subs.w	fp, sl, r4
 80085bc:	d00b      	beq.n	80085d6 <_svfiprintf_r+0x7e>
 80085be:	465b      	mov	r3, fp
 80085c0:	4622      	mov	r2, r4
 80085c2:	4629      	mov	r1, r5
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ff6b 	bl	80084a0 <__ssputs_r>
 80085ca:	3001      	adds	r0, #1
 80085cc:	f000 80a7 	beq.w	800871e <_svfiprintf_r+0x1c6>
 80085d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d2:	445a      	add	r2, fp
 80085d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80085d6:	f89a 3000 	ldrb.w	r3, [sl]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 809f 	beq.w	800871e <_svfiprintf_r+0x1c6>
 80085e0:	2300      	movs	r3, #0
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ea:	f10a 0a01 	add.w	sl, sl, #1
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	9307      	str	r3, [sp, #28]
 80085f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80085f8:	4654      	mov	r4, sl
 80085fa:	2205      	movs	r2, #5
 80085fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008600:	484e      	ldr	r0, [pc, #312]	@ (800873c <_svfiprintf_r+0x1e4>)
 8008602:	f7f7 fded 	bl	80001e0 <memchr>
 8008606:	9a04      	ldr	r2, [sp, #16]
 8008608:	b9d8      	cbnz	r0, 8008642 <_svfiprintf_r+0xea>
 800860a:	06d0      	lsls	r0, r2, #27
 800860c:	bf44      	itt	mi
 800860e:	2320      	movmi	r3, #32
 8008610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008614:	0711      	lsls	r1, r2, #28
 8008616:	bf44      	itt	mi
 8008618:	232b      	movmi	r3, #43	@ 0x2b
 800861a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800861e:	f89a 3000 	ldrb.w	r3, [sl]
 8008622:	2b2a      	cmp	r3, #42	@ 0x2a
 8008624:	d015      	beq.n	8008652 <_svfiprintf_r+0xfa>
 8008626:	9a07      	ldr	r2, [sp, #28]
 8008628:	4654      	mov	r4, sl
 800862a:	2000      	movs	r0, #0
 800862c:	f04f 0c0a 	mov.w	ip, #10
 8008630:	4621      	mov	r1, r4
 8008632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008636:	3b30      	subs	r3, #48	@ 0x30
 8008638:	2b09      	cmp	r3, #9
 800863a:	d94b      	bls.n	80086d4 <_svfiprintf_r+0x17c>
 800863c:	b1b0      	cbz	r0, 800866c <_svfiprintf_r+0x114>
 800863e:	9207      	str	r2, [sp, #28]
 8008640:	e014      	b.n	800866c <_svfiprintf_r+0x114>
 8008642:	eba0 0308 	sub.w	r3, r0, r8
 8008646:	fa09 f303 	lsl.w	r3, r9, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	46a2      	mov	sl, r4
 8008650:	e7d2      	b.n	80085f8 <_svfiprintf_r+0xa0>
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	1d19      	adds	r1, r3, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	9103      	str	r1, [sp, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	bfbb      	ittet	lt
 800865e:	425b      	neglt	r3, r3
 8008660:	f042 0202 	orrlt.w	r2, r2, #2
 8008664:	9307      	strge	r3, [sp, #28]
 8008666:	9307      	strlt	r3, [sp, #28]
 8008668:	bfb8      	it	lt
 800866a:	9204      	strlt	r2, [sp, #16]
 800866c:	7823      	ldrb	r3, [r4, #0]
 800866e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008670:	d10a      	bne.n	8008688 <_svfiprintf_r+0x130>
 8008672:	7863      	ldrb	r3, [r4, #1]
 8008674:	2b2a      	cmp	r3, #42	@ 0x2a
 8008676:	d132      	bne.n	80086de <_svfiprintf_r+0x186>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	1d1a      	adds	r2, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9203      	str	r2, [sp, #12]
 8008680:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008684:	3402      	adds	r4, #2
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800874c <_svfiprintf_r+0x1f4>
 800868c:	7821      	ldrb	r1, [r4, #0]
 800868e:	2203      	movs	r2, #3
 8008690:	4650      	mov	r0, sl
 8008692:	f7f7 fda5 	bl	80001e0 <memchr>
 8008696:	b138      	cbz	r0, 80086a8 <_svfiprintf_r+0x150>
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	eba0 000a 	sub.w	r0, r0, sl
 800869e:	2240      	movs	r2, #64	@ 0x40
 80086a0:	4082      	lsls	r2, r0
 80086a2:	4313      	orrs	r3, r2
 80086a4:	3401      	adds	r4, #1
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	4824      	ldr	r0, [pc, #144]	@ (8008740 <_svfiprintf_r+0x1e8>)
 80086ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086b2:	2206      	movs	r2, #6
 80086b4:	f7f7 fd94 	bl	80001e0 <memchr>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d036      	beq.n	800872a <_svfiprintf_r+0x1d2>
 80086bc:	4b21      	ldr	r3, [pc, #132]	@ (8008744 <_svfiprintf_r+0x1ec>)
 80086be:	bb1b      	cbnz	r3, 8008708 <_svfiprintf_r+0x1b0>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	3307      	adds	r3, #7
 80086c4:	f023 0307 	bic.w	r3, r3, #7
 80086c8:	3308      	adds	r3, #8
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	4433      	add	r3, r6
 80086d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d2:	e76a      	b.n	80085aa <_svfiprintf_r+0x52>
 80086d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d8:	460c      	mov	r4, r1
 80086da:	2001      	movs	r0, #1
 80086dc:	e7a8      	b.n	8008630 <_svfiprintf_r+0xd8>
 80086de:	2300      	movs	r3, #0
 80086e0:	3401      	adds	r4, #1
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f04f 0c0a 	mov.w	ip, #10
 80086ea:	4620      	mov	r0, r4
 80086ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086f0:	3a30      	subs	r2, #48	@ 0x30
 80086f2:	2a09      	cmp	r2, #9
 80086f4:	d903      	bls.n	80086fe <_svfiprintf_r+0x1a6>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0c6      	beq.n	8008688 <_svfiprintf_r+0x130>
 80086fa:	9105      	str	r1, [sp, #20]
 80086fc:	e7c4      	b.n	8008688 <_svfiprintf_r+0x130>
 80086fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008702:	4604      	mov	r4, r0
 8008704:	2301      	movs	r3, #1
 8008706:	e7f0      	b.n	80086ea <_svfiprintf_r+0x192>
 8008708:	ab03      	add	r3, sp, #12
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	462a      	mov	r2, r5
 800870e:	4b0e      	ldr	r3, [pc, #56]	@ (8008748 <_svfiprintf_r+0x1f0>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	4638      	mov	r0, r7
 8008714:	f3af 8000 	nop.w
 8008718:	1c42      	adds	r2, r0, #1
 800871a:	4606      	mov	r6, r0
 800871c:	d1d6      	bne.n	80086cc <_svfiprintf_r+0x174>
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	065b      	lsls	r3, r3, #25
 8008722:	f53f af2d 	bmi.w	8008580 <_svfiprintf_r+0x28>
 8008726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008728:	e72c      	b.n	8008584 <_svfiprintf_r+0x2c>
 800872a:	ab03      	add	r3, sp, #12
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	462a      	mov	r2, r5
 8008730:	4b05      	ldr	r3, [pc, #20]	@ (8008748 <_svfiprintf_r+0x1f0>)
 8008732:	a904      	add	r1, sp, #16
 8008734:	4638      	mov	r0, r7
 8008736:	f000 f879 	bl	800882c <_printf_i>
 800873a:	e7ed      	b.n	8008718 <_svfiprintf_r+0x1c0>
 800873c:	08008cd9 	.word	0x08008cd9
 8008740:	08008ce3 	.word	0x08008ce3
 8008744:	00000000 	.word	0x00000000
 8008748:	080084a1 	.word	0x080084a1
 800874c:	08008cdf 	.word	0x08008cdf

08008750 <_printf_common>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	4616      	mov	r6, r2
 8008756:	4698      	mov	r8, r3
 8008758:	688a      	ldr	r2, [r1, #8]
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008760:	4293      	cmp	r3, r2
 8008762:	bfb8      	it	lt
 8008764:	4613      	movlt	r3, r2
 8008766:	6033      	str	r3, [r6, #0]
 8008768:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800876c:	4607      	mov	r7, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b10a      	cbz	r2, 8008776 <_printf_common+0x26>
 8008772:	3301      	adds	r3, #1
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	0699      	lsls	r1, r3, #26
 800877a:	bf42      	ittt	mi
 800877c:	6833      	ldrmi	r3, [r6, #0]
 800877e:	3302      	addmi	r3, #2
 8008780:	6033      	strmi	r3, [r6, #0]
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	f015 0506 	ands.w	r5, r5, #6
 8008788:	d106      	bne.n	8008798 <_printf_common+0x48>
 800878a:	f104 0a19 	add.w	sl, r4, #25
 800878e:	68e3      	ldr	r3, [r4, #12]
 8008790:	6832      	ldr	r2, [r6, #0]
 8008792:	1a9b      	subs	r3, r3, r2
 8008794:	42ab      	cmp	r3, r5
 8008796:	dc26      	bgt.n	80087e6 <_printf_common+0x96>
 8008798:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	3b00      	subs	r3, #0
 80087a0:	bf18      	it	ne
 80087a2:	2301      	movne	r3, #1
 80087a4:	0692      	lsls	r2, r2, #26
 80087a6:	d42b      	bmi.n	8008800 <_printf_common+0xb0>
 80087a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087ac:	4641      	mov	r1, r8
 80087ae:	4638      	mov	r0, r7
 80087b0:	47c8      	blx	r9
 80087b2:	3001      	adds	r0, #1
 80087b4:	d01e      	beq.n	80087f4 <_printf_common+0xa4>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	f003 0306 	and.w	r3, r3, #6
 80087be:	2b04      	cmp	r3, #4
 80087c0:	bf02      	ittt	eq
 80087c2:	68e5      	ldreq	r5, [r4, #12]
 80087c4:	6833      	ldreq	r3, [r6, #0]
 80087c6:	1aed      	subeq	r5, r5, r3
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	bf0c      	ite	eq
 80087cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087d0:	2500      	movne	r5, #0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bfc4      	itt	gt
 80087d6:	1a9b      	subgt	r3, r3, r2
 80087d8:	18ed      	addgt	r5, r5, r3
 80087da:	2600      	movs	r6, #0
 80087dc:	341a      	adds	r4, #26
 80087de:	42b5      	cmp	r5, r6
 80087e0:	d11a      	bne.n	8008818 <_printf_common+0xc8>
 80087e2:	2000      	movs	r0, #0
 80087e4:	e008      	b.n	80087f8 <_printf_common+0xa8>
 80087e6:	2301      	movs	r3, #1
 80087e8:	4652      	mov	r2, sl
 80087ea:	4641      	mov	r1, r8
 80087ec:	4638      	mov	r0, r7
 80087ee:	47c8      	blx	r9
 80087f0:	3001      	adds	r0, #1
 80087f2:	d103      	bne.n	80087fc <_printf_common+0xac>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fc:	3501      	adds	r5, #1
 80087fe:	e7c6      	b.n	800878e <_printf_common+0x3e>
 8008800:	18e1      	adds	r1, r4, r3
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	2030      	movs	r0, #48	@ 0x30
 8008806:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800880a:	4422      	add	r2, r4
 800880c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008814:	3302      	adds	r3, #2
 8008816:	e7c7      	b.n	80087a8 <_printf_common+0x58>
 8008818:	2301      	movs	r3, #1
 800881a:	4622      	mov	r2, r4
 800881c:	4641      	mov	r1, r8
 800881e:	4638      	mov	r0, r7
 8008820:	47c8      	blx	r9
 8008822:	3001      	adds	r0, #1
 8008824:	d0e6      	beq.n	80087f4 <_printf_common+0xa4>
 8008826:	3601      	adds	r6, #1
 8008828:	e7d9      	b.n	80087de <_printf_common+0x8e>
	...

0800882c <_printf_i>:
 800882c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	7e0f      	ldrb	r7, [r1, #24]
 8008832:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008834:	2f78      	cmp	r7, #120	@ 0x78
 8008836:	4691      	mov	r9, r2
 8008838:	4680      	mov	r8, r0
 800883a:	460c      	mov	r4, r1
 800883c:	469a      	mov	sl, r3
 800883e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008842:	d807      	bhi.n	8008854 <_printf_i+0x28>
 8008844:	2f62      	cmp	r7, #98	@ 0x62
 8008846:	d80a      	bhi.n	800885e <_printf_i+0x32>
 8008848:	2f00      	cmp	r7, #0
 800884a:	f000 80d2 	beq.w	80089f2 <_printf_i+0x1c6>
 800884e:	2f58      	cmp	r7, #88	@ 0x58
 8008850:	f000 80b9 	beq.w	80089c6 <_printf_i+0x19a>
 8008854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800885c:	e03a      	b.n	80088d4 <_printf_i+0xa8>
 800885e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008862:	2b15      	cmp	r3, #21
 8008864:	d8f6      	bhi.n	8008854 <_printf_i+0x28>
 8008866:	a101      	add	r1, pc, #4	@ (adr r1, 800886c <_printf_i+0x40>)
 8008868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800886c:	080088c5 	.word	0x080088c5
 8008870:	080088d9 	.word	0x080088d9
 8008874:	08008855 	.word	0x08008855
 8008878:	08008855 	.word	0x08008855
 800887c:	08008855 	.word	0x08008855
 8008880:	08008855 	.word	0x08008855
 8008884:	080088d9 	.word	0x080088d9
 8008888:	08008855 	.word	0x08008855
 800888c:	08008855 	.word	0x08008855
 8008890:	08008855 	.word	0x08008855
 8008894:	08008855 	.word	0x08008855
 8008898:	080089d9 	.word	0x080089d9
 800889c:	08008903 	.word	0x08008903
 80088a0:	08008993 	.word	0x08008993
 80088a4:	08008855 	.word	0x08008855
 80088a8:	08008855 	.word	0x08008855
 80088ac:	080089fb 	.word	0x080089fb
 80088b0:	08008855 	.word	0x08008855
 80088b4:	08008903 	.word	0x08008903
 80088b8:	08008855 	.word	0x08008855
 80088bc:	08008855 	.word	0x08008855
 80088c0:	0800899b 	.word	0x0800899b
 80088c4:	6833      	ldr	r3, [r6, #0]
 80088c6:	1d1a      	adds	r2, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6032      	str	r2, [r6, #0]
 80088cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088d4:	2301      	movs	r3, #1
 80088d6:	e09d      	b.n	8008a14 <_printf_i+0x1e8>
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	6820      	ldr	r0, [r4, #0]
 80088dc:	1d19      	adds	r1, r3, #4
 80088de:	6031      	str	r1, [r6, #0]
 80088e0:	0606      	lsls	r6, r0, #24
 80088e2:	d501      	bpl.n	80088e8 <_printf_i+0xbc>
 80088e4:	681d      	ldr	r5, [r3, #0]
 80088e6:	e003      	b.n	80088f0 <_printf_i+0xc4>
 80088e8:	0645      	lsls	r5, r0, #25
 80088ea:	d5fb      	bpl.n	80088e4 <_printf_i+0xb8>
 80088ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	da03      	bge.n	80088fc <_printf_i+0xd0>
 80088f4:	232d      	movs	r3, #45	@ 0x2d
 80088f6:	426d      	negs	r5, r5
 80088f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088fc:	4859      	ldr	r0, [pc, #356]	@ (8008a64 <_printf_i+0x238>)
 80088fe:	230a      	movs	r3, #10
 8008900:	e011      	b.n	8008926 <_printf_i+0xfa>
 8008902:	6821      	ldr	r1, [r4, #0]
 8008904:	6833      	ldr	r3, [r6, #0]
 8008906:	0608      	lsls	r0, r1, #24
 8008908:	f853 5b04 	ldr.w	r5, [r3], #4
 800890c:	d402      	bmi.n	8008914 <_printf_i+0xe8>
 800890e:	0649      	lsls	r1, r1, #25
 8008910:	bf48      	it	mi
 8008912:	b2ad      	uxthmi	r5, r5
 8008914:	2f6f      	cmp	r7, #111	@ 0x6f
 8008916:	4853      	ldr	r0, [pc, #332]	@ (8008a64 <_printf_i+0x238>)
 8008918:	6033      	str	r3, [r6, #0]
 800891a:	bf14      	ite	ne
 800891c:	230a      	movne	r3, #10
 800891e:	2308      	moveq	r3, #8
 8008920:	2100      	movs	r1, #0
 8008922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008926:	6866      	ldr	r6, [r4, #4]
 8008928:	60a6      	str	r6, [r4, #8]
 800892a:	2e00      	cmp	r6, #0
 800892c:	bfa2      	ittt	ge
 800892e:	6821      	ldrge	r1, [r4, #0]
 8008930:	f021 0104 	bicge.w	r1, r1, #4
 8008934:	6021      	strge	r1, [r4, #0]
 8008936:	b90d      	cbnz	r5, 800893c <_printf_i+0x110>
 8008938:	2e00      	cmp	r6, #0
 800893a:	d04b      	beq.n	80089d4 <_printf_i+0x1a8>
 800893c:	4616      	mov	r6, r2
 800893e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008942:	fb03 5711 	mls	r7, r3, r1, r5
 8008946:	5dc7      	ldrb	r7, [r0, r7]
 8008948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800894c:	462f      	mov	r7, r5
 800894e:	42bb      	cmp	r3, r7
 8008950:	460d      	mov	r5, r1
 8008952:	d9f4      	bls.n	800893e <_printf_i+0x112>
 8008954:	2b08      	cmp	r3, #8
 8008956:	d10b      	bne.n	8008970 <_printf_i+0x144>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	07df      	lsls	r7, r3, #31
 800895c:	d508      	bpl.n	8008970 <_printf_i+0x144>
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	4299      	cmp	r1, r3
 8008964:	bfde      	ittt	le
 8008966:	2330      	movle	r3, #48	@ 0x30
 8008968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800896c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008970:	1b92      	subs	r2, r2, r6
 8008972:	6122      	str	r2, [r4, #16]
 8008974:	f8cd a000 	str.w	sl, [sp]
 8008978:	464b      	mov	r3, r9
 800897a:	aa03      	add	r2, sp, #12
 800897c:	4621      	mov	r1, r4
 800897e:	4640      	mov	r0, r8
 8008980:	f7ff fee6 	bl	8008750 <_printf_common>
 8008984:	3001      	adds	r0, #1
 8008986:	d14a      	bne.n	8008a1e <_printf_i+0x1f2>
 8008988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800898c:	b004      	add	sp, #16
 800898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f043 0320 	orr.w	r3, r3, #32
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	4833      	ldr	r0, [pc, #204]	@ (8008a68 <_printf_i+0x23c>)
 800899c:	2778      	movs	r7, #120	@ 0x78
 800899e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	6831      	ldr	r1, [r6, #0]
 80089a6:	061f      	lsls	r7, r3, #24
 80089a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80089ac:	d402      	bmi.n	80089b4 <_printf_i+0x188>
 80089ae:	065f      	lsls	r7, r3, #25
 80089b0:	bf48      	it	mi
 80089b2:	b2ad      	uxthmi	r5, r5
 80089b4:	6031      	str	r1, [r6, #0]
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	bf44      	itt	mi
 80089ba:	f043 0320 	orrmi.w	r3, r3, #32
 80089be:	6023      	strmi	r3, [r4, #0]
 80089c0:	b11d      	cbz	r5, 80089ca <_printf_i+0x19e>
 80089c2:	2310      	movs	r3, #16
 80089c4:	e7ac      	b.n	8008920 <_printf_i+0xf4>
 80089c6:	4827      	ldr	r0, [pc, #156]	@ (8008a64 <_printf_i+0x238>)
 80089c8:	e7e9      	b.n	800899e <_printf_i+0x172>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f023 0320 	bic.w	r3, r3, #32
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	e7f6      	b.n	80089c2 <_printf_i+0x196>
 80089d4:	4616      	mov	r6, r2
 80089d6:	e7bd      	b.n	8008954 <_printf_i+0x128>
 80089d8:	6833      	ldr	r3, [r6, #0]
 80089da:	6825      	ldr	r5, [r4, #0]
 80089dc:	6961      	ldr	r1, [r4, #20]
 80089de:	1d18      	adds	r0, r3, #4
 80089e0:	6030      	str	r0, [r6, #0]
 80089e2:	062e      	lsls	r6, r5, #24
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0x1c0>
 80089e8:	6019      	str	r1, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0x1c6>
 80089ec:	0668      	lsls	r0, r5, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0x1bc>
 80089f0:	8019      	strh	r1, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6123      	str	r3, [r4, #16]
 80089f6:	4616      	mov	r6, r2
 80089f8:	e7bc      	b.n	8008974 <_printf_i+0x148>
 80089fa:	6833      	ldr	r3, [r6, #0]
 80089fc:	1d1a      	adds	r2, r3, #4
 80089fe:	6032      	str	r2, [r6, #0]
 8008a00:	681e      	ldr	r6, [r3, #0]
 8008a02:	6862      	ldr	r2, [r4, #4]
 8008a04:	2100      	movs	r1, #0
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7f7 fbea 	bl	80001e0 <memchr>
 8008a0c:	b108      	cbz	r0, 8008a12 <_printf_i+0x1e6>
 8008a0e:	1b80      	subs	r0, r0, r6
 8008a10:	6060      	str	r0, [r4, #4]
 8008a12:	6863      	ldr	r3, [r4, #4]
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	2300      	movs	r3, #0
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a1c:	e7aa      	b.n	8008974 <_printf_i+0x148>
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	4632      	mov	r2, r6
 8008a22:	4649      	mov	r1, r9
 8008a24:	4640      	mov	r0, r8
 8008a26:	47d0      	blx	sl
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d0ad      	beq.n	8008988 <_printf_i+0x15c>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	079b      	lsls	r3, r3, #30
 8008a30:	d413      	bmi.n	8008a5a <_printf_i+0x22e>
 8008a32:	68e0      	ldr	r0, [r4, #12]
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	4298      	cmp	r0, r3
 8008a38:	bfb8      	it	lt
 8008a3a:	4618      	movlt	r0, r3
 8008a3c:	e7a6      	b.n	800898c <_printf_i+0x160>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4632      	mov	r2, r6
 8008a42:	4649      	mov	r1, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	47d0      	blx	sl
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d09d      	beq.n	8008988 <_printf_i+0x15c>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	68e3      	ldr	r3, [r4, #12]
 8008a50:	9903      	ldr	r1, [sp, #12]
 8008a52:	1a5b      	subs	r3, r3, r1
 8008a54:	42ab      	cmp	r3, r5
 8008a56:	dcf2      	bgt.n	8008a3e <_printf_i+0x212>
 8008a58:	e7eb      	b.n	8008a32 <_printf_i+0x206>
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	f104 0619 	add.w	r6, r4, #25
 8008a60:	e7f5      	b.n	8008a4e <_printf_i+0x222>
 8008a62:	bf00      	nop
 8008a64:	08008cea 	.word	0x08008cea
 8008a68:	08008cfb 	.word	0x08008cfb

08008a6c <memmove>:
 8008a6c:	4288      	cmp	r0, r1
 8008a6e:	b510      	push	{r4, lr}
 8008a70:	eb01 0402 	add.w	r4, r1, r2
 8008a74:	d902      	bls.n	8008a7c <memmove+0x10>
 8008a76:	4284      	cmp	r4, r0
 8008a78:	4623      	mov	r3, r4
 8008a7a:	d807      	bhi.n	8008a8c <memmove+0x20>
 8008a7c:	1e43      	subs	r3, r0, #1
 8008a7e:	42a1      	cmp	r1, r4
 8008a80:	d008      	beq.n	8008a94 <memmove+0x28>
 8008a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a8a:	e7f8      	b.n	8008a7e <memmove+0x12>
 8008a8c:	4402      	add	r2, r0
 8008a8e:	4601      	mov	r1, r0
 8008a90:	428a      	cmp	r2, r1
 8008a92:	d100      	bne.n	8008a96 <memmove+0x2a>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a9e:	e7f7      	b.n	8008a90 <memmove+0x24>

08008aa0 <_sbrk_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d06      	ldr	r5, [pc, #24]	@ (8008abc <_sbrk_r+0x1c>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	602b      	str	r3, [r5, #0]
 8008aac:	f7f8 fc14 	bl	80012d8 <_sbrk>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_sbrk_r+0x1a>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_sbrk_r+0x1a>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20001edc 	.word	0x20001edc

08008ac0 <memcpy>:
 8008ac0:	440a      	add	r2, r1
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	4770      	bx	lr
 8008acc:	b510      	push	{r4, lr}
 8008ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad6:	4291      	cmp	r1, r2
 8008ad8:	d1f9      	bne.n	8008ace <memcpy+0xe>
 8008ada:	bd10      	pop	{r4, pc}

08008adc <_realloc_r>:
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	4615      	mov	r5, r2
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	b921      	cbnz	r1, 8008af2 <_realloc_r+0x16>
 8008ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	4611      	mov	r1, r2
 8008aee:	f7ff bc4b 	b.w	8008388 <_malloc_r>
 8008af2:	b92a      	cbnz	r2, 8008b00 <_realloc_r+0x24>
 8008af4:	f7ff fbdc 	bl	80082b0 <_free_r>
 8008af8:	2400      	movs	r4, #0
 8008afa:	4620      	mov	r0, r4
 8008afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b00:	f000 f81a 	bl	8008b38 <_malloc_usable_size_r>
 8008b04:	4285      	cmp	r5, r0
 8008b06:	4606      	mov	r6, r0
 8008b08:	d802      	bhi.n	8008b10 <_realloc_r+0x34>
 8008b0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b0e:	d8f4      	bhi.n	8008afa <_realloc_r+0x1e>
 8008b10:	4629      	mov	r1, r5
 8008b12:	4640      	mov	r0, r8
 8008b14:	f7ff fc38 	bl	8008388 <_malloc_r>
 8008b18:	4607      	mov	r7, r0
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0ec      	beq.n	8008af8 <_realloc_r+0x1c>
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	462a      	mov	r2, r5
 8008b22:	4621      	mov	r1, r4
 8008b24:	bf28      	it	cs
 8008b26:	4632      	movcs	r2, r6
 8008b28:	f7ff ffca 	bl	8008ac0 <memcpy>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7ff fbbe 	bl	80082b0 <_free_r>
 8008b34:	463c      	mov	r4, r7
 8008b36:	e7e0      	b.n	8008afa <_realloc_r+0x1e>

08008b38 <_malloc_usable_size_r>:
 8008b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3c:	1f18      	subs	r0, r3, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfbc      	itt	lt
 8008b42:	580b      	ldrlt	r3, [r1, r0]
 8008b44:	18c0      	addlt	r0, r0, r3
 8008b46:	4770      	bx	lr

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
